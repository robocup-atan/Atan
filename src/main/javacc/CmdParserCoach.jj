options {
  STATIC = false;
  LOOKAHEAD = 2;
}
PARSER_BEGIN(CmdParserCoach)
package com.github.robocup_atan.atan.parser.coach;

//~--- non-JDK imports --------------------------------------------------------

import com.github.robocup_atan.atan.model.ActionsCoach;
import com.github.robocup_atan.atan.model.ControllerCoach;
import com.github.robocup_atan.atan.model.enums.Errors;
import com.github.robocup_atan.atan.model.enums.Ok;
import com.github.robocup_atan.atan.model.enums.PlayMode;
import com.github.robocup_atan.atan.model.enums.RefereeMessage;
import com.github.robocup_atan.atan.model.enums.ServerParams;
import com.github.robocup_atan.atan.model.enums.Warning;
import com.github.robocup_atan.atan.model.enums.UnknownObject;

import com.github.robocup_atan.atan.parser.objects.ObjName;
import com.github.robocup_atan.atan.parser.objects.ObjNameBall;
import com.github.robocup_atan.atan.parser.objects.ObjNameFlagGoalLeft;
import com.github.robocup_atan.atan.parser.objects.ObjNameFlagGoalRight;
import com.github.robocup_atan.atan.parser.objects.ObjNameUnknown;
import com.github.robocup_atan.atan.parser.objects.ObjNamePlayerEast;
import com.github.robocup_atan.atan.parser.objects.ObjNamePlayerWest;

//~--- JDK imports ------------------------------------------------------------

import java.io.StringReader;

import java.util.HashMap;

  public class CmdParserCoach {

    ControllerCoach controller;
    ActionsCoach coach;

    public void parseSeeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
			ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startSeeCommand();
    }
    public void parseOkCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          	ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startOkCommand();
    }
    public void parseErrorCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
			ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startErrorCommand();
    }
    public void parseWarningCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startWarningCommand();
    }
    public void parseInitCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startInitCommand();
    }
    public void parseChangePlayerTypeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startCPTCommand();
    }
    public void parseServerParamCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startServerParamCommand();
    }
    public void parsePlayerParamCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startPlayerParamCommand();
    }
    public void parsePlayerTypeCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startPlayerTypeCommand();
    }
    public void parseHearCommand (String cmd, ControllerCoach controller, ActionsCoach coach)
        throws ParseException{
          ReInit(new StringReader(cmd));
      		this.controller = controller;
      		this.coach = coach;
      		startHearCommand();
    }
}
PARSER_END(CmdParserCoach)

SKIP: {
  "\t"|"\n"|"\r"|"\""
}
TOKEN :
{
 < B: "b"|"B">|
  < FLAG: "f"|"F">|
  < P: "p"|"P">|
  < L: "l"|"L">|
  < GOAL: "g"|"G">|
  < GOALIE: "goalie">|
  < REFEREE: "referee"|"Referee">|
  < SELF: "self">|
  < VIEW_MODE: "view_mode">|
  < HIGH: "high">|
  < LOW: "low">|
  < WIDE: "wide">|
  < NARROW: "narrow">|
  < NORMAL: "normal">|
  < STAMINA: "stamina">|
  < SPEED: "speed">|
  < HEAD_ANGLE: "head_angle">|
  < KICK: "kick">|
  < DASH: "dash">|
  < TURN: "turn">|
  < SAY: "say">|
  < EAR_OFF: "ear off" >|
  < EAR_ON: "ear on" >|
  < EYE_OFF: "eye off" >|
  < EYE_ON: "eye on" >|
  < TURN_NECK: "turn_neck">|
  < BEFORE_KICK_OFF: "before_kick_off">|
  < TIME_OVER: "time_over">|
  < PLAY_ON: "play_on">|
  < DROP_BALL: "drop_ball">|
  < KICK_OFF_L: "kick_off_l">|
  < KICK_OFF_R: "kick_off_r">|
  < KICK_IN_L: "kick_in_l">|
  < KICK_IN_R: "kick_in_r">|
  < INDIRECT_FREE_KICK_R: "indirect_free_kick_r">|
  < INDIRECT_FREE_KICK_L: "indirect_free_kick_l">|
  < BACK_PASS_L: "back_pass_l">|
  < BACK_PASS_R: "back_pass_r">|
  < FOUL_CHARGE_L: "foul_charge_l">|
  < FOUL_CHARGE_R: "foul_charge_r">|
  < FREE_KICK_R: "free_kick_r">|
  < FREE_KICK_L: "free_kick_l">|
  < FREE_KICK_FAULT_R: "free_kick_fault_r">|
  < FREE_KICK_FAULT_L: "free_kick_fault_l">|
  < CORNER_KICK_R: "corner_kick_r">|
  < CORNER_KICK_L: "corner_kick_l">|
  < GOAL_KICK_R: "goal_kick_r">|
  < GOAL_KICK_L: "goal_kick_l">|
  < GOAL_R: "goal_r_"(["0"-"9"])+>|
  < GOAL_L: "goal_l_"(["0"-"9"])+>|
  < GOAL_CATCH_R: "goalie_catch_ball_r">|
  < GOAL_CATCH_L: "goalie_catch_ball_l">|
  < FOUL_R: "foul_r">|
  < FOUL_L: "foul_l">|
  < OFFSIDE_R: "offside_r">|
  < OFFSIDE_L: "offside_l">|
  < HALF_TIME: "half_time">|
  < TEAM: "team" >|
  < TIME_UP: "time_up">|
  < TIME_UP_WITHOUT_A_TEAM: "time_up_without_a_team">|
  < TIME_EXTENDED: "time_extended">|
  < NO_LEFT_OF_THAT_TYPE: "no_left_of_that_type">|
   // Errors.
  < ALREADY_HAVE_OFFLINE_COACH: "already_have_offline_coach">|
  < CONNECTED_OFFLINE_COACH_WITHOUT_COACH_MODE: "connected_offline_coach_without_coach_mode">|
  < CONNECTION_FAILED: "connection_failed">|
  < CANNOT_SAY_FREEFORM_WHILE_PLAYON: "cannot_say_freeform_while_playon">|
  < COULD_NOT_PARSE_SAY: "could_not_parse_say">|
  < GOALIE_ALREADY_EXISTS: "goalie_already_exists">|
  < ILLEGAL_CLIENT_VERSION: "illegal_client_version">|
  < ILLEGAL_COMMAND_FORM: "illegal_command_form">|
  < ILLEGAL_MODE: "illegal_mode">|
  < INVALID_XPM_DATA: "invalid_xpm_data">|
  < OUT_OF_RANGE_PLAYER_TYPE: "out_of_range_player_type">|
  < SAID_TOO_MANY_ADVICE_MESSAGES: "said_too_many_advice_messages">|
  < SAID_TOO_MANY_DEFINE_MESSAGES: "said_too_many_define_messages">|
  < SAID_TOO_MANY_DEL_MESSAGES: "said_too_many_del_messages">|
  < SAID_TOO_MANY_FREEFORM_MESSAGES: "said_too_many_freeform_messages">|
  < SAID_TOO_MANY_INFO_MESSAGES: "said_too_many_info_messages">|
  < SAID_TOO_MANY_MESSAGES: "said_too_many_messages">|
  < SAID_TOO_MANY_META_MESSAGES: "said_too_many_meta_messages">|
  < SAID_TOO_MANY_RULE_MESSAGES: "said_too_many_rule_messages">|
  < SOCKET_OPEN_FAILED: "socket_open_failed">|
  < UNKNOWN_COMMAND: "unknown_command">|
  // End of errors.
  < MOVE: "move">|
  < CHANGE_MODE: "change_mode">|
  < CHECK_BALL: "check_ball">|
  < START: "start">|
  < RECOVER: "recover">|
  < CHANGE_PLAYER_TYPE: "change_player_type">|
  < LOOK: "look">|
  < TEAM_NAMES: "team_names">|
  < TEAM_GRAPHIC: "team_graphic">|
  < NO_TEAM_FOUND: "no_team_found">|
  < NO_SUCH_PLAYER: "no_such_player">|
  < CANNOT_SUB_WHILE_PLAYON: "cannot_sub_while_playon">|
  < NO_SUBS_LEFT: "no_subs_left">|
  < MAX_OF_THAT_TYPE_ON_FIELD: "max_of_that_type_on_field">|
  < CANNOT_CHANGE_GOALIE: "cannot_change_goalie">|
  < CHANGE_VIEW: "change_view">|
  < CATCH: "catch">|
  < ID: "id" >|
  < PLAYER_SPEED_MAX: "player_speed_max" >|
  < STAMINA_INC_MAX: "stamina_inc_max" >|
  < PLAYER_DECAY: "player_decay" >|
  < INERTIA_MOMENT: "inertia_moment" >|
  < PLAYER_SIZE: "player_size" >|
  < KICKABLE_MARGIN: "kickable_margin" >|
  < KICK_RAND: "kick_rand" >|
  < EXTRA_STAMINA: "extra_stamina" >|
  < EFFORT_MAX: "effort_max" >|
  < EFFORT_MIN: "effort_min" >|
  < ALLOW_MULT_DEFAULT_TYPE: "allow_mult_default_type" >|
  < DASH_POWER_RATE_DELTA_MAX: "dash_power_rate_delta_max" >|
  < DASH_POWER_RATE_DELTA_MIN: "dash_power_rate_delta_min" >|
  < EFFORT_MAX_DELTA_FACTOR: "effort_max_delta_factor" >|
  < EFFORT_MIN_DELTA_FACTOR: "effort_min_delta_factor" >|
  < EXTRA_STAMINA_DELTA_MAX: "extra_stamina_delta_max" >|
  < EXTRA_STAMINA_DELTA_MIN: "extra_stamina_delta_min" >|
  < INERTIA_MOMENT_DELTA_FACTOR: "inertia_moment_delta_factor" >|
  < KICK_RAND_DELTA_FACTOR: "kick_rand_delta_factor" >|
  < KICKABLE_MARGIN_DELTA_MAX: "kickable_margin_delta_max" >|
  < KICKABLE_MARGIN_DELTA_MIN: "kickable_margin_delta_min" >|
  < NEW_DASH_POWER_RATE_DELTA_MAX: "new_dash_power_rate_delta_max" >|
  < NEW_DASH_POWER_RATE_DELTA_MIN: "new_dash_power_rate_delta_min" >|
  < NEW_STAMINA_INC_MAX_DELTA_FACTOR: "new_stamina_inc_max_delta_factor" >|
  < PLAYER_DECAY_DELTA_MAX: "player_decay_delta_max" >|
  < PLAYER_DECAY_DELTA_MIN: "player_decay_delta_min" >|
  < PLAYER_SIZE_DELTA_FACTOR: "player_size_delta_factor" >|
  < PLAYER_SPEED_MAX_DELTA_MAX: "player_speed_max_delta_max" >|
  < PLAYER_SPEED_MAX_DELTA_MIN: "player_speed_max_delta_min" >|
  < PLAYER_TYPES: "player_types" >|
  < PT_MAX: "pt_max" >|
  < RANDOM_SEED: "random_seed" >|
  < STAMINA_INC_MAX_DELTA_FACTOR: "stamina_inc_max_delta_factor" >|
  < SUBS_MAX: "subs_max" >|
  < AUDIO_CUT_DIST: "audio_cut_dist" >|
  < AUTO_MODE: "auto_mode" >|
  < BACK_DASH_RATE: "back_dash_rate" >|
  < BACK_PASSES: "back_passes" >|
  < BALL_ACCEL_MAX: "ball_accel_max" >|
  < BALL_DECAY: "ball_decay" >|
  < BALL_RAND: "ball_rand" >|
  < BALL_SIZE: "ball_size" >|
  < BALL_SPEED_MAX: "ball_speed_max" >|
  < BALL_STUCK_AREA: "ball_stuck_area" >|
  < BALL_WEIGHT: "ball_weight" >|
  < CATCH_BAN_CYCLE: "catch_ban_cycle" >|
  < CATCH_PROBABILITY: "catch_probability" >|
  < CATCHABLE_AREA_L: "catchable_area_l" >|
  < CATCHABLE_AREA_W: "catchable_area_w" >|
  < CKICK_MARGIN: "ckick_margin" >|
  < CLANG_ADVICE_WIN: "clang_advice_win" >|
  < CLANG_DEFINE_WIN: "clang_define_win" >|
  < CLANG_DEL_WIN: "clang_del_win" >|
  < CLANG_INFO_WIN: "clang_info_win" >|
  < CLANG_MESS_DELAY: "clang_mess_delay" >|
  < CLANG_MESS_PER_CYCLE: "clang_mess_per_cycle" >|
  < CLANG_META_WIN: "clang_meta_win" >|
  < CLANG_RULE_WIN: "clang_rule_win" >|
  < CLANG_WIN_SIZE: "clang_win_size" >|
  < COACH: "coach" >|
  < COACH_PORT: "coach_port" >|
  < COACH_W_REFEREE: "coach_w_referee" >|
  < CONNECT_WAIT: "connect_wait" >|
  < CONTROL_RADIUS: "control_radius" >|
  < DASH_ANGLE_STEP: "dash_angle_step" >|
  < DASH_POWER_RATE: "dash_power_rate" >|
  < DROP_BALL_TIME: "drop_ball_time" >|
  < EFFORT_DEC: "effort_dec" >|
  < EFFORT_DEC_THR: "effort_dec_thr" >|
  < EFFORT_INC: "effort_inc" >|
  < EFFORT_INC_THR: "effort_inc_thr" >|
  < EFFORT_INIT: "effort_init" >|
  < EXTRA_HALF_TIME: "extra_half_time" >|
  < FORBID_KICK_OFF_OFFSIDE: "forbid_kick_off_offside" >|
  < FREE_KICK_FAULTS: "free_kick_faults" >|
  < FREEFORM_SEND_PERIOD: "freeform_send_period" >|
  < FREEFORM_WAIT_PERIOD: "freeform_wait_period" >|
  < FULLSTATE_L: "fullstate_l" >|
  < FULLSTATE_R: "fullstate_r" >|
  < GAME_LOG_COMPRESSION: "game_log_compression" >|
  < GAME_LOG_DATED: "game_log_dated" >|
  < GAME_LOG_DIR: "game_log_dir" >|
  < GAME_LOG_FIXED: "game_log_fixed" >|
  < GAME_LOG_FIXED_NAME: "game_log_fixed_name" >|
  < GAME_LOG_VERSION: "game_log_version" >|
  < GAME_LOGGING: "game_logging" >|
  < GAME_OVER_WAIT: "game_over_wait" >|
  < GOAL_WIDTH: "goal_width" >|
  < GOALIE_MAX_MOVES: "goalie_max_moves" >|
  < HEAR_DECAY: "hear_decay" >|
  < HEAR_INC: "hear_inc" >|
  < HEAR_MAX:  "hear_max" >|
  < KEEPAWAY: "keepaway" >|
  < KEEPAWAY_LENGTH: "keepaway_length" >|
  < KEEPAWAY_LOG_DATED: "keepaway_log_dated" >|
  < KEEPAWAY_LOG_DIR: "keepaway_log_dir" >|
  < KEEPAWAY_LOG_FIXED: "keepaway_log_fixed" >|
  < KEEPAWAY_LOG_FIXED_NAME: "keepaway_log_fixed_name" >|
  < KEEPAWAY_LOGGING: "keepaway_logging" >|
  < KEEPAWAY_START: "keepaway_start" >|
  < KEEPAWAY_WIDTH: "keepaway_width" >|
  < KICK_OFF_WAIT: "kick_off_wait" >|
  < KICK_POWER_RATE: "kick_power_rate" >|
  < KICK_RAND_FACTOR_L: "kick_rand_factor_l" >|
  < KICK_RAND_FACTOR_R: "kick_rand_factor_r" >|
  < LANDMARK_FILE: "landmark_file" >|
  < LOG_DATE_FORMAT: "log_date_format" >|
  < LOG_TIMES: "log_times" >|
  < MAX_BACK_TACKLE_POWER: "max_back_tackle_power" >|
  < MAX_DASH_ANGLE: "max_dash_angle" >|
  < MAX_DASH_POWER: "max_dash_power" >|
  < MAX_GOAL_KICKS: "max_goal_kicks" >|
  < MAX_TACKLE_POWER: "max_tackle_power" >|
  < MAXMOMENT: "maxmoment" >|
  < MAXNECKANG: "maxneckang" >|
  < MAXNECKMOMENT: "maxneckmoment" >|
  < MAXPOWER: "maxpower" >|
  < MIN_DASH_ANGLE: "min_dash_angle" >|
  < MIN_DASH_POWER: "min_dash_power" >|
  < MINMOMENT: "minmoment" >|
  < MINNECKANG: "minneckang" >|
  < MINNECKMOMENT: "minneckmoment" >|
  < MINPOWER: "minpower" >|
  < NR_EXTRA_HALFS: "nr_extra_halfs" >|
  < NR_NORMAL_HALFS: "nr_normal_halfs" >|
  < OFFSIDE_ACTIVE_AREA_SIZE: "offside_active_area_size" >|
  < OFFSIDE_KICK_MARGIN: "offside_kick_margin" >|
  < OLCOACH_PORT: "olcoach_port" >|
  < OLD_COACH_HEAR: "old_coach_hear" >|
  < PEN_ALLOW_MULT_KICKS: "pen_allow_mult_kicks" >|
  < PEN_BEFORE_SETUP_WAIT: "pen_before_setup_wait" >|
  < PEN_COACH_MOVES_PLAYERS: "pen_coach_moves_players" >|
  < PEN_DIST_X: "pen_dist_x" >|
  < PEN_MAX_EXTRA_KICKS: "pen_max_extra_kicks" >|
  < PEN_MAX_GOALIE_DIST_X: "pen_max_goalie_dist_x" >|
  < PEN_NR_KICKS: "pen_nr_kicks" >|
  < PEN_RANDOM_WINNER: "pen_random_winner" >|
  < PEN_READY_WAIT: "pen_ready_wait" >|
  < PEN_SETUP_WAIT: "pen_setup_wait" >|
  < PEN_TAKEN_WAIT: "pen_taken_wait" >|
  < PENALTY_SHOOT_OUTS: "penalty_shoot_outs" >|
  < PLAYER_ACCEL_MAX: "player_accel_max" >|
  < PLAYER_RAND: "player_rand" >|
  < PLAYER_SPEED_MAX_MIN: "player_speed_max_min" >|
  < PLAYER_WEIGHT: "player_weight" >|
  < POINT_TO_BAN: "point_to_ban" >|
  < POINT_TO_DURATION: "point_to_duration" >|
  < PORT: "port" >|
  < PRAND_FACTOR_L: "prand_factor_l" >|
  < PRAND_FACTOR_R: "prand_factor_r" >|
  < PROFILE: "profile" >|
  < PROPER_GOAL_KICKS: "proper_goal_kicks" >|
  < QUANTIZE_STEP: "quantize_step" >|
  < QUANTIZE_STEP_L: "quantize_step_l" >|
  < RECORD_MESSAGES: "record_messages" >|
  < RECOVER_DEC: "recover_dec" >|
  < RECOVER_DEC_THR: "recover_dec_thr" >|
  < RECOVER_INIT: "recover_init" >|
  < RECOVER_MIN: "recover_min" >|
  < RECV_STEP: "recv_step" >|
  < SAY_COACH_CNT_MAX: "say_coach_cnt_max" >|
  < SAY_COACH_MSG_SIZE: "say_coach_msg_size" >|
  < SAY_MSG_SIZE: "say_msg_size" >|
  < SEND_COMMS: "send_comms" >|
  < SEND_STEP: "send_step" >|
  < SEND_VI_STEP: "send_vi_step" >|
  < SENSE_BODY_STEP: "sense_body_step" >|
  < SIDE_DASH_RATE: "side_dash_rate" >|
  < SIMULATOR_STEP: "simulator_step" >|
  < SLOW_DOWN_FACTOR: "slow_down_factor" >|
  < SLOWNESS_ON_TOP_FOR_LEFT_TEAM: "slowness_on_top_for_left_team" >|
  < SLOWNESS_ON_TOP_FOR_RIGHT_TEAM: "slowness_on_top_for_right_team" >|
  < STAMINA_CAPACITY: "stamina_capacity" >|
  < STAMINA_MAX: "stamina_max" >|
  < START_GOAL_L: "start_goal_l" >|
  < START_GOAL_R: "start_goal_r" >|
  < STOPPED_BALL_VEL: "stopped_ball_vel" >|
  < SYNCH_MICRO_SLEEP: "synch_micro_sleep" >|
  < SYNCH_MODE: "synch_mode" >|
  < SYNCH_OFFSET: "synch_offset" >|
  < SYNCH_SEE_OFFSET: "synch_see_offset" >|
  < TACKLE_BACK_DIST: "tackle_back_dist" >|
  < TACKLE_CYCLES: "tackle_cycles" >|
  < TACKLE_DIST: "tackle_dist" >|
  < TACKLE_EXPONENT: "tackle_exponent" >|
  < TACKLE_POWER_RATE: "tackle_power_rate" >|
  < TACKLE_WIDTH: "tackle_width" >|
  < TEAM_ACTUATOR_NOISE: "team_actuator_noise" >|
  < TEAM_L_START: "team_l_start" >|
  < TEAM_R_START: "team_r_start" >|
  < TEXT_LOG_COMPRESSION: "text_log_compression" >|
  < TEXT_LOG_DATED: "text_log_dated" >|
  < TEXT_LOG_DIR: "text_log_dir" >|
  < TEXT_LOG_FIXED: "text_log_fixed" >|
  < TEXT_LOG_FIXED_NAME: "text_log_fixed_name" >|
  < TEXT_LOGGING: "text_logging" >|
  < USE_OFFSIDE: "use_offside" >|
  < VERBOSE: "verbose" >|
  < VISIBLE_ANGLE: "visible_angle" >|
  < VISIBLE_DISTANCE: "visible_distance" >|
  < WIND_ANG: "wind_ang" >|
  < WIND_DIR: "wind_dir" >|
  < WIND_FORCE: "wind_force" >|
  < WIND_NONE: "wind_none" >|
  < WIND_RAND: "wind_rand" >|
  < WIND_RANDOM: "wind_random" >|
  < C: "c">|
  < T: "t">|
  < R: "r">|
  < OB: "(">|
  < CB: ")">|
  < SEP: " ">|
  < NUM:(["-", "+"])?(["0"-"9"])*(".")?(["0"-"9"])+(["e", "E"](["-", "+"])?(["0"-"9"])+)? >|
  < NAM: ["a"-"z","A"-"Z","_",".","/","-","%","~"] ( ["a"-"z","A"-"Z","_","0"-"9",".","/","-","%","~"] )* >
}

void startSeeCommand() : //The see_global command.
  {Token cycle=null;} {
    [<SEP>]cycle=<NUM>[<SEP>(<OB>objInfo()<CB>[<SEP>]{Integer iCycle = new Integer(cycle.image);
    controller.setCycle(iCycle);})+]
  }

//Get object details.
void objInfo() :
  {ObjName name; Token p1=null; Token p2=null; Token p3=null;
  Token p4=null; Token p5=null; Token p6=null; Token p7=null;
  Token kicked=null;} {
    <OB>name=objName()<CB><SEP>[p1=<NUM>[<SEP>]]  //x
                               [p2=<NUM>[<SEP>]]  //y
                               [p3=<NUM>[<SEP>]]  //deltaX
                               [p4=<NUM>[<SEP>]]  //deltaY
                               [p5=<NUM>[<SEP>]]  //bodyAngle
                               [p6=<NUM>[<SEP>]]  //neckAngle
							   [kicked=<NAM>[<SEP>]]{ //Player kicked last turn - Currently only stopping the exception!

      Double dX = 0.0;
      Double dY = 0.0;
      Double dDeltaX = 0.0;
      Double dDeltaY = 0.0;
      Double dBodyAngle = 0.0;
      Double dNeckAngle = 0.0;

      //Stop null pointer errors.
          if (p1 != null){
                dX = new Double(p1.toString());
          } else{
                dX = new Double(0);
          }
          if (p2 != null){
                dY = new Double(p2.toString());
          } else{
                dY = new Double(0);
          }
          if (p3 != null){
                dDeltaX = new Double(p3.toString());
          } else{
                dDeltaX = new Double(0);
          }
          if (p4 != null){
                dDeltaY = new Double(p4.toString());
          } else{
                dDeltaY = new Double(0);
          }
          if (p5 != null){
                dBodyAngle = new Double(p5.toString());
          } else{
                dBodyAngle = new Double(0);
          }
          if (p6 != null){
                dNeckAngle = new Double(p6.toString());
          } else{
                dNeckAngle = new Double(0);
          }

        //East-West dependancy
        if (coach.isTeamEast()) {
          name.infoSeeFromEast(controller, dX.doubleValue(), dY.doubleValue(), dDeltaX.doubleValue(),
                               dDeltaY.doubleValue(), dBodyAngle.doubleValue(), dNeckAngle.doubleValue());
        }
        else {
          name.infoSeeFromWest(controller, dX.doubleValue(), dY.doubleValue(), dDeltaX.doubleValue(),
                               dDeltaY.doubleValue(), dBodyAngle.doubleValue(), dNeckAngle.doubleValue());
        }
    }
}

ObjName objName() :
  {Token name; Token num; ObjName objName=null;} {
    <P>[[<SEP>]objName=objNamePlayer()] {
      if (objName==null) return new ObjNameUnknown(UnknownObject.PLAYER);
      else return objName;
    } |
    <B> {
      return new ObjNameBall();
    } |
    <GOAL>[<SEP>objName=objNameFlagGoal()] {
      if (objName==null) return new ObjNameUnknown(UnknownObject.GOAL);
      else return objName;
    }
  }

ObjName objNamePlayer() :
  {Token name=null; Token num=null; Token goalie=null; ObjName objName=null;} {
    name=<NAM>[<SEP>num=<NUM>][<SEP>goalie=<GOALIE>] {
      Integer iNum;
      //Assign seen player number.
      if (num==null) iNum = new Integer(-1);
      else  iNum = new Integer(num.toString());
      //Work out of one of ours or theirs.
      if (name.toString().equals(coach.getTeamName())){
            if (goalie==null){
                if (coach.isTeamEast()) return new ObjNamePlayerEast(iNum.intValue(), false);
                else return new ObjNamePlayerWest(iNum.intValue(), false);
            } else {
                if (coach.isTeamEast()) return new ObjNamePlayerEast(iNum.intValue(), true);
                else return new ObjNamePlayerWest(iNum.intValue(), true);
            }
      }
      else{
            if (goalie==null){
                if (coach.isTeamEast()) return new ObjNamePlayerWest(iNum.intValue(), false);
                else return new ObjNamePlayerEast(iNum.intValue(), false);
            } else {
                if (coach.isTeamEast()) return new ObjNamePlayerWest(iNum.intValue(), true);
                else return new ObjNamePlayerEast(iNum.intValue(), true);
            }
      }
    }|
    <L><SEP>num=<NUM> {
      Integer iNum = new Integer(num.toString());
      if (goalie==null){
            return new ObjNamePlayerWest(iNum.intValue(), false);
      } else {
            return new ObjNamePlayerWest(iNum.intValue(), true);
      }
    }|
    <R><SEP>num=<NUM> {
      Integer iNum = new Integer(num.toString());
      if (goalie==null){
            return new ObjNamePlayerEast(iNum.intValue(), false);
      } else {
            return new ObjNamePlayerEast(iNum.intValue(), true);
      }
    }
  }

  ObjName objNameFlagGoal() :
  {Token q=null;} {
    <L>[<SEP>q=<T>|<SEP>q=<B>] {
      if (q==null) return new ObjNameFlagGoalLeft('c');
      else return new ObjNameFlagGoalLeft(q.image.charAt(0));
    }|
    <R>[<SEP>q=<T>|<SEP>q=<B>] {
      if (q==null) return new ObjNameFlagGoalRight('c');
      else return new ObjNameFlagGoalRight(q.image.charAt(0));
    }
  }


// Basic init command.
void startInitCommand() :
  {Token side=null;} {
    (side=<L>|side=<R>){
      coach.setTeamEast(side.image.charAt(0) == 'r');
    }
  }

// Simple enum commands.
void startErrorCommand() :
  {Errors error = null;}{
    error=error(){
        controller.infoHearError(error);
    }
  }

void startOkCommand() : //TODO Add support for team_graphic command.
    {Ok ok = null;}{
        ok=ok(){
            controller.infoHearOk(ok);
     }
  }

void startWarningCommand() :
    {Warning warning = null;}{
        warning=warning(){
            controller.infoHearWarning(warning);
     }
  }

void startHearCommand() :
  {Token num;Token msg;Token team; Token cycle;} {
    cycle=<NUM><SEP>(
      <OB><P><SEP>team=<NAM><SEP><NUM>(<SEP><GOALIE>)?<CB><SEP>msg=<NAM>{double dNum = 0.0; controller.infoHearPlayer(dNum, team.image, msg.image);Integer iCycle = new Integer(cycle.image);
    controller.setCycle(iCycle);}|
      <SELF>|
      <REFEREE><SEP>hearReferee()
    )
  }

void startTeamNamesCommand() :
	{Token teamName1=null;Token teamName2=null;}{
	  [<SEP ><OB ><TEAM ><SEP ><L>< SEP >teamName1=<NAM ><CB >]
	  [<SEP ><OB ><TEAM ><SEP ><R>< SEP >teamName2=<NAM ><CB >]{
	    String sTeam1Name = new String();
	    String sTeam2Name = new String();
	    if (teamName1 != null){
	      sTeam1Name = teamName1.image;
	    }
	    if (teamName2 != null){
	      sTeam2Name = teamName2.image;
	    }
	    controller.infoHearTeamNames(sTeam1Name, sTeam2Name);
	}
}
	    
	  
	  

void hearReferee() :
  {PlayMode playMode=null; RefereeMessage refereeMessage=null;}{
    playMode=playMode(){
      controller.infoHearPlayMode(playMode);
    }|
    refereeMessage=refereeMessage(){
      controller.infoHearReferee(refereeMessage);
    }
  }

//Enum Switches
Warning warning() :
    {}{
    <NO_TEAM_FOUND>{
        return Warning.NO_TEAM_FOUND;
        }|
    <NO_SUCH_PLAYER>{
        return Warning.NO_SUCH_PLAYER;
        }|
    <CANNOT_SUB_WHILE_PLAYON>{
        return Warning.CANNOT_SUB_WHILE_PLAYON;
        }|
    <NO_SUBS_LEFT>{
        return Warning.NO_SUBS_LEFT;
        }|
    <MAX_OF_THAT_TYPE_ON_FIELD>{
        return Warning.MAX_OF_THAT_TYPE_ON_FIELD;
        }|
    <CANNOT_CHANGE_GOALIE>{
        return Warning.CANNOT_CHANGE_GOALIE;
        }|
      <NO_LEFT_OF_THAT_TYPE>{
      	return Warning.NO_LEFT_OF_THAT_TYPE;
      	}
}
Ok ok() :
    {}{
    <MOVE>{
        return Ok.MOVE;
        }|
    <CHANGE_MODE>{
        return Ok.CHANGE_MODE;
        }|
    <CHECK_BALL>{
        return Ok.CHECK_BALL;
        }|
    <START>{
        return Ok.START;
        }|
    <RECOVER>{
        return Ok.RECOVER;
        }
| <EAR_OFF>{ return Ok.EAR_OFF; }
| <EAR_ON>{ return Ok.EAR_ON; }
| <EYE_OFF>{ return Ok.EYE_OFF; }
| <EYE_ON>{ return Ok.EYE_ON; }
|    <SAY>{
        return Ok.SAY;
        }|
    <CHANGE_PLAYER_TYPE>{
        //startCPTCommand();
        return Ok.CHANGE_PLAYER_TYPE;
        }|
    <LOOK>{
      	startSeeCommand();
        return Ok.LOOK;
        }|
    <TEAM_NAMES>{
      	startTeamNamesCommand();
        return Ok.TEAM_NAMES;
        }|
    <TEAM_GRAPHIC>{
        return Ok.TEAM_GRAPHIC;
        }
}
Errors error() :
  {}{
    <ALREADY_HAVE_OFFLINE_COACH>{ return Errors.ALREADY_HAVE_OFFLINE_COACH; }|
    <CONNECTED_OFFLINE_COACH_WITHOUT_COACH_MODE>{ return Errors.CONNECTED_OFFLINE_COACH_WITHOUT_COACH_MODE; }|
    <CONNECTION_FAILED>{ return Errors.CONNECTION_FAILED; }|
    <CANNOT_SAY_FREEFORM_WHILE_PLAYON>{ return Errors.CANNOT_SAY_FREEFORM_WHILE_PLAYON; }|
    <COULD_NOT_PARSE_SAY>{ return Errors.COULD_NOT_PARSE_SAY; }|
    <GOALIE_ALREADY_EXISTS>{ return Errors.GOALIE_ALREADY_EXISTS; }|
    <ILLEGAL_CLIENT_VERSION>{ return Errors.ILLEGAL_CLIENT_VERSION; }|
    <ILLEGAL_COMMAND_FORM>{ return Errors.ILLEGAL_COMMAND_FORM; }|
    <ILLEGAL_MODE>{ return Errors.ILLEGAL_MODE; }|
    <INVALID_XPM_DATA>{ return Errors.INVALID_XPM_DATA; }|
    <OUT_OF_RANGE_PLAYER_TYPE>{ return Errors.OUT_OF_RANGE_PLAYER_TYPE; }|
    <SAID_TOO_MANY_ADVICE_MESSAGES>{ return Errors.SAID_TOO_MANY_ADVICE_MESSAGES; }|
    <SAID_TOO_MANY_DEFINE_MESSAGES>{ return Errors.SAID_TOO_MANY_DEFINE_MESSAGES; }|
    <SAID_TOO_MANY_DEL_MESSAGES>{ return Errors.SAID_TOO_MANY_DEL_MESSAGES; }|
    <SAID_TOO_MANY_FREEFORM_MESSAGES>{ return Errors.SAID_TOO_MANY_FREEFORM_MESSAGES; }|
    <SAID_TOO_MANY_INFO_MESSAGES>{ return Errors.SAID_TOO_MANY_INFO_MESSAGES; }|
    <SAID_TOO_MANY_MESSAGES>{ return Errors.SAID_TOO_MANY_MESSAGES; }|
    <SAID_TOO_MANY_META_MESSAGES>{ return Errors.SAID_TOO_MANY_META_MESSAGES; }|
    <SAID_TOO_MANY_RULE_MESSAGES>{ return Errors.SAID_TOO_MANY_RULE_MESSAGES; }|
    <SOCKET_OPEN_FAILED>{ return Errors.SOCKET_OPEN_FAILED; }|
    <UNKNOWN_COMMAND>{ return Errors.UNKNOWN_COMMAND; }
  }
PlayMode playMode() :
  {}{
     <BEFORE_KICK_OFF>{
      return PlayMode.BEFORE_KICK_OFF;
    }|
    <TIME_OVER>{
      return PlayMode.TIME_OVER;
    }|
    <PLAY_ON>{
      return PlayMode.PLAY_ON;
    }|
    <KICK_OFF_L>{
      if (coach.isTeamEast())
        return PlayMode.KICK_OFF_OTHER;
      else
        return PlayMode.KICK_OFF_OWN;
    }|
    <KICK_OFF_R>{
      if (!coach.isTeamEast())
        return PlayMode.KICK_OFF_OTHER;
      else
        return PlayMode.KICK_OFF_OWN;
    }|
    <KICK_IN_L>{
      if (coach.isTeamEast())
        return PlayMode.KICK_IN_OTHER;
      else
        return PlayMode.KICK_IN_OWN;
    }|
    <KICK_IN_R>{
      if (!coach.isTeamEast())
        return PlayMode.KICK_IN_OTHER;
      else
        return PlayMode.KICK_IN_OWN;
    }|
    <INDIRECT_FREE_KICK_R>{
      if (!coach.isTeamEast())
        return PlayMode.INDIRECT_FREE_KICK_OTHER;
      else
        return PlayMode.INDIRECT_FREE_KICK_OWN;
    }|
    <INDIRECT_FREE_KICK_L>{
      if (coach.isTeamEast())
        return PlayMode.INDIRECT_FREE_KICK_OTHER;
      else
        return PlayMode.INDIRECT_FREE_KICK_OWN;
    }|
    <FREE_KICK_R>{
      if (!coach.isTeamEast())
        return PlayMode.FREE_KICK_OTHER;
      else
        return PlayMode.FREE_KICK_OWN;
    }|
    <FREE_KICK_L>{
      if (coach.isTeamEast())
        return PlayMode.FREE_KICK_OTHER;
      else
        return PlayMode.FREE_KICK_OWN;
    }|
    <FREE_KICK_FAULT_R>{
      if (!coach.isTeamEast())
        return PlayMode.FREE_KICK_FAULT_OTHER;
      else
        return PlayMode.FREE_KICK_FAULT_OWN;
    }|
    <FREE_KICK_FAULT_L>{
      if (coach.isTeamEast())
        return PlayMode.FREE_KICK_FAULT_OTHER;
      else
        return PlayMode.FREE_KICK_FAULT_OWN;
    }|
    <CORNER_KICK_R>{
      if (!coach.isTeamEast())
        return PlayMode.CORNER_KICK_OTHER;
      else
        return PlayMode.CORNER_KICK_OWN;
    }|
    <CORNER_KICK_L>{
      if (coach.isTeamEast())
        return PlayMode.CORNER_KICK_OTHER;
      else
        return PlayMode.CORNER_KICK_OWN;
    }|
    <GOAL_KICK_R>{
      if (!coach.isTeamEast())
        return PlayMode.GOAL_KICK_OTHER;
      else
        return PlayMode.GOAL_KICK_OWN;
    }|
    <GOAL_KICK_L>{
      if (coach.isTeamEast())
        return PlayMode.GOAL_KICK_OTHER;
      else
        return PlayMode.GOAL_KICK_OWN;
    }|
    <GOAL_R>{
      if (!coach.isTeamEast())
        return PlayMode.GOAL_OTHER;
      else
        return PlayMode.GOAL_OWN;
    }|
    <GOAL_L>{
      if (coach.isTeamEast())
        return PlayMode.GOAL_OTHER;
      else
        return PlayMode.GOAL_OWN;
    }
  }
RefereeMessage refereeMessage() :
  {}{
    <OFFSIDE_R>{
      if (!coach.isTeamEast())
        return RefereeMessage.OFFSIDE_OTHER;
      else
        return RefereeMessage.OFFSIDE_OWN;
    }|
    <OFFSIDE_L>{
      if (coach.isTeamEast())
        return RefereeMessage.OFFSIDE_OTHER;
      else
        return RefereeMessage.OFFSIDE_OWN;
    }|
   	<BACK_PASS_L>{
      if (!coach.isTeamEast())
        return RefereeMessage.BACK_PASS_OTHER;
      else
        return RefereeMessage.BACK_PASS_OWN;
    }|
    <BACK_PASS_R>{
      if (coach.isTeamEast())
        return RefereeMessage.BACK_PASS_OTHER;
      else
        return RefereeMessage.BACK_PASS_OWN;
    }|
    <FOUL_CHARGE_L>{
      if (!coach.isTeamEast())
        return RefereeMessage.FOUL_CHARGE_OTHER;
      else
        return RefereeMessage.FOUL_CHARGE_OWN;
    }|
    <FOUL_CHARGE_R>{
      if (coach.isTeamEast())
        return RefereeMessage.FOUL_CHARGE_OTHER;
      else
        return RefereeMessage.FOUL_CHARGE_OWN;
    }|
    <FOUL_R>{
      if (!coach.isTeamEast())
        return RefereeMessage.FOUL_OTHER;
      else
        return RefereeMessage.FOUL_OWN;
    }|
    <FOUL_L>{
      if (coach.isTeamEast())
        return RefereeMessage.FOUL_OTHER;
      else
        return RefereeMessage.FOUL_OWN;
    }|
    <HALF_TIME>{
        return RefereeMessage.HALF_TIME;
    }|
    <DROP_BALL>{
        return RefereeMessage.DROP_BALL;
    }|
    <GOAL_CATCH_R>{
      if (!coach.isTeamEast())
        return RefereeMessage.GOAL_CATCH_OTHER;
      else
        return RefereeMessage.GOAL_CATCH_OWN;
    }|
    <GOAL_CATCH_L>{
      if (coach.isTeamEast())
        return RefereeMessage.GOAL_CATCH_OTHER;
      else
        return RefereeMessage.GOAL_CATCH_OWN;
    }|
    <TIME_UP>{
        return RefereeMessage.TIME_UP;
    }|
    <TIME_UP_WITHOUT_A_TEAM>{
        return RefereeMessage.TIME_UP_WITHOUT_A_TEAM;
    }|
    <TIME_EXTENDED>{
        return RefereeMessage.TIME_EXTENDED;
    }
}

void startServerParamCommand() : //Possibly the biggest method ever!
    {Token audioCutDist=null; Token autoMode=null;Token backDashRate=null;
	Token backPasses=null;Token ballAccelMax=null;Token ballDecay=null;
	Token ballRand=null;Token ballSize=null;Token ballSpeedMax=null;
	Token ballStuckArea=null;Token ballWeight=null;Token catchBanCycle=null;
	Token catchProbability=null;Token catchableAreaL=null;Token catchableAreaW=null;
	Token ckickMargin=null;Token clangAdviceWin=null;Token clangDefineWin=null;
	Token clangDelWin=null;Token clangInfoWin=null;Token clangMessDelay=null;
	Token clangMessPerCycle=null;Token clangMetaWin=null;Token clangRuleWin=null;
	Token clangWinSize=null;Token coach=null;Token coachPort=null;
	Token coachWReferee=null;Token connectWait=null;Token controlRadius=null;
	Token dashAngleStep=null;Token dashPowerRate=null;Token dropBallTime=null;
	Token effortDec=null;Token effortDecThr=null;Token effortInc=null;
	Token effortIncThr=null;Token effortInit=null;Token effortMin=null;
	Token extraHalfTime=null;Token extraStamina=null;Token forbidKickOffOffside=null;
	Token freeKickFaults=null;Token freeformSendPeriod=null;Token freeformWaitPeriod=null;
	Token fullstateL=null;Token fullstateR=null;Token gameLogCompression=null;
	Token gameLogDated=null;Token gameLogDir=null;Token gameLogFixed=null;
	Token gameLogFixedName=null;Token gameLogVersion=null;Token gameLogging=null;
	Token gameOverWait=null;Token goalWidth=null;Token goalieMaxMoves=null;
	Token halfTime=null;Token hearDecay=null;Token hearInc=null;Token hearMax=null;
	Token inertiaMoment=null;Token keepaway=null;Token keepawayLength=null;
	Token keepawayLogDated=null;Token keepawayLogDir=null;Token keepawayLogFixed=null;
	Token keepawayLogFixedName=null;Token keepawayLogging=null;Token keepawayStart=null;
	Token keepawayWidth=null;Token kickOffWait=null;Token kickPowerRate=null;Token kickRand=null;
	Token kickRandFactorL=null;Token kickRandFactorR=null;Token kickableMargin=null;
	Token landmarkFile=null;Token logDateFormat=null;Token logTimes=null;
	Token maxBackTacklePower=null;Token maxDashAngle=null;Token maxDashPower=null;
	Token maxGoalKicks=null;Token maxTacklePower=null;Token maxmoment=null;
	Token maxneckang=null;Token maxneckmoment=null;Token maxpower=null;
	Token minDashAngle=null;Token minDashPower=null;Token minmoment=null;
	Token minneckang=null;Token minneckmoment=null;Token minpower=null;Token nrExtraHalfs=null;
	Token nrNormalHalfs=null;Token offsideActiveAreaSize=null;Token offsideKickMargin=null;
	Token olcoachPort=null;Token oldCoachHear=null;Token penAllowMultKicks=null;
	Token penBeforeSetupWait=null;Token penCoachMovesPlayers=null;Token penDistX=null;
	Token penMaxExtraKicks=null;Token penMaxGoalieDistX=null;Token penNrKicks=null;
	Token penRandomWinner=null;Token penReadyWait=null;Token penSetupWait=null;
	Token penTakenWait=null;Token penaltyShootOuts=null;Token playerAccelMax=null;
	Token playerDecay=null;Token playerRand=null;Token playerSize=null;
	Token playerSpeedMax=null;Token playerSpeedMaxMin=null;Token playerWeight=null;
	Token pointToBan=null;Token pointToDuration=null;Token port=null;Token prandFactorL=null;
	Token prandFactorR=null;Token profile=null;Token properGoalKicks=null;Token quantizeStep=null;
	Token quantizeStepL=null;Token recordMessages=null;Token recoverDec=null;Token recoverDecThr=null;
	Token recoverInit=null;Token recoverMin=null;Token recvStep=null;Token sayCoachCntMax=null;
	Token sayCoachMsgSize=null;Token sayMsgSize=null;Token sendComms=null;Token sendStep=null;
	Token sendViStep=null;Token senseBodyStep=null;Token sideDashRate=null;
	Token simulatorStep=null;Token slowDownFactor=null;Token slownessOnTopForLeftTeam=null;
	Token slownessOnTopForRightTeam=null;Token staminaCapacity=null;Token staminaIncMax=null;
	Token staminaMax=null;Token startGoalL=null;Token startGoalR=null;Token stoppedBallVel=null;
	Token synchMicroSleep=null;Token synchMode=null;Token synchOffset=null;
	Token synchSeeOffset=null;Token tackleBackDist=null;Token tackleCycles=null;
	Token tackleDist=null;Token tackleExponent=null;Token tacklePowerRate=null;
	Token tackleWidth=null;Token teamActuatorNoise=null;Token teamLStart=null;
	Token teamRStart=null;Token textLogCompression=null;Token textLogDated=null;
	Token textLogDir=null;Token textLogFixed=null;Token textLogFixedName=null;
	Token textLogging=null;Token useOffside=null;Token verbose=null;Token visibleAngle=null;
	Token visibleDistance=null;Token windAng=null;Token windDir=null;
	Token windForce=null;Token windNone=null;Token windRand=null;Token windRandom=null;}
    {
		< OB ><AUDIO_CUT_DIST><SEP >audioCutDist=< NUM ><CB >
		< OB ><AUTO_MODE><SEP >autoMode=< NUM ><CB >
		< OB ><BACK_DASH_RATE><SEP >backDashRate=< NUM ><CB >
		< OB ><BACK_PASSES><SEP >backPasses=< NUM ><CB >
		< OB ><BALL_ACCEL_MAX><SEP >ballAccelMax=< NUM ><CB >
		< OB ><BALL_DECAY><SEP >ballDecay=< NUM ><CB >
		< OB ><BALL_RAND ><SEP >ballRand=< NUM ><CB >
		< OB ><BALL_SIZE ><SEP >ballSize=< NUM ><CB >
		< OB ><BALL_SPEED_MAX ><SEP >ballSpeedMax=< NUM ><CB >
		< OB ><BALL_STUCK_AREA><SEP >ballStuckArea=< NUM ><CB >
		< OB ><BALL_WEIGHT ><SEP >ballWeight=< NUM ><CB >
		< OB ><CATCH_BAN_CYCLE><SEP >catchBanCycle=< NUM ><CB >
		< OB ><CATCH_PROBABILITY><SEP >catchProbability=< NUM ><CB >
		< OB ><CATCHABLE_AREA_L ><SEP >catchableAreaL=< NUM ><CB >
		< OB ><CATCHABLE_AREA_W ><SEP >catchableAreaW=< NUM ><CB >
		< OB ><CKICK_MARGIN ><SEP >ckickMargin=< NUM ><CB >
		< OB ><CLANG_ADVICE_WIN ><SEP >clangAdviceWin=< NUM ><CB >
		< OB ><CLANG_DEFINE_WIN ><SEP >clangDefineWin=< NUM ><CB >
		< OB ><CLANG_DEL_WIN><SEP >clangDelWin=< NUM ><CB >
		< OB ><CLANG_INFO_WIN><SEP >clangInfoWin=< NUM ><CB >
		< OB ><CLANG_MESS_DELAY><SEP >clangMessDelay=< NUM ><CB >
		< OB ><CLANG_MESS_PER_CYCLE ><SEP >clangMessPerCycle=< NUM ><CB >
		< OB ><CLANG_META_WIN ><SEP >clangMetaWin=< NUM ><CB >
		< OB ><CLANG_RULE_WIN ><SEP >clangRuleWin=< NUM ><CB >
		< OB ><CLANG_WIN_SIZE ><SEP >clangWinSize=< NUM ><CB >
		< OB ><COACH ><SEP >coach=< NUM ><CB >
		< OB ><COACH_PORT ><SEP >coachPort=< NUM ><CB >
		< OB ><COACH_W_REFEREE ><SEP >coachWReferee=< NUM ><CB >
		< OB ><CONNECT_WAIT ><SEP >connectWait=< NUM ><CB >
		< OB ><CONTROL_RADIUS ><SEP >controlRadius=< NUM ><CB >
		< OB ><DASH_ANGLE_STEP ><SEP >dashAngleStep=< NUM ><CB >
		< OB ><DASH_POWER_RATE><SEP >dashPowerRate=< NUM ><CB >
		< OB ><DROP_BALL_TIME ><SEP >dropBallTime=< NUM ><CB >
		< OB ><EFFORT_DEC ><SEP >effortDec=< NUM ><CB >
		< OB ><EFFORT_DEC_THR ><SEP >effortDecThr=< NUM ><CB >
		< OB ><EFFORT_INC ><SEP >effortInc=< NUM ><CB >
		< OB ><EFFORT_INC_THR ><SEP >effortIncThr=< NUM ><CB >
		< OB ><EFFORT_INIT ><SEP >effortInit=< NUM ><CB >
		< OB ><EFFORT_MIN ><SEP >effortMin=< NUM ><CB >
		< OB ><EXTRA_HALF_TIME ><SEP >extraHalfTime=< NUM ><CB >
		< OB ><EXTRA_STAMINA  ><SEP >extraStamina=< NUM ><CB >
		< OB ><FORBID_KICK_OFF_OFFSIDE ><SEP >forbidKickOffOffside=< NUM ><CB >
		< OB ><FREE_KICK_FAULTS ><SEP >freeKickFaults=< NUM ><CB >
		< OB ><FREEFORM_SEND_PERIOD><SEP >freeformSendPeriod=< NUM ><CB >
		< OB ><FREEFORM_WAIT_PERIOD><SEP >freeformWaitPeriod=< NUM ><CB >
		< OB ><FULLSTATE_L ><SEP >fullstateL=< NUM ><CB >
		< OB ><FULLSTATE_R ><SEP >fullstateR=< NUM ><CB >
		< OB ><GAME_LOG_COMPRESSION ><SEP >gameLogCompression=< NUM ><CB >
		< OB ><GAME_LOG_DATED ><SEP >gameLogDated=< NUM ><CB >
		< OB ><GAME_LOG_DIR ><SEP >gameLogDir=< NAM ><CB >
		< OB ><GAME_LOG_FIXED ><SEP >gameLogFixed=< NUM ><CB >
		< OB ><GAME_LOG_FIXED_NAME ><SEP >gameLogFixedName=< NAM ><CB >
		< OB ><GAME_LOG_VERSION ><SEP >gameLogVersion=< NUM ><CB >
		< OB ><GAME_LOGGING ><SEP >gameLogging=< NUM ><CB >
		< OB ><GAME_OVER_WAIT><SEP >gameOverWait=< NUM ><CB >
		< OB ><GOAL_WIDTH ><SEP >goalWidth=< NUM ><CB >
		< OB ><GOALIE_MAX_MOVES ><SEP >goalieMaxMoves=< NUM ><CB >
		< OB ><HALF_TIME ><SEP >halfTime=< NUM ><CB >
		< OB ><HEAR_DECAY ><SEP >hearDecay=< NUM ><CB >
		< OB ><HEAR_INC ><SEP >hearInc=< NUM ><CB >
		< OB ><HEAR_MAX  ><SEP >hearMax=< NUM ><CB >
		< OB ><INERTIA_MOMENT ><SEP >inertiaMoment=< NUM ><CB >
		< OB ><KEEPAWAY ><SEP >keepaway=< NUM ><CB >
		< OB ><KEEPAWAY_LENGTH ><SEP >keepawayLength=< NUM ><CB >
		< OB ><KEEPAWAY_LOG_DATED ><SEP >keepawayLogDated=< NUM ><CB >
		< OB ><KEEPAWAY_LOG_DIR ><SEP >keepawayLogDir=< NAM ><CB >
		< OB ><KEEPAWAY_LOG_FIXED ><SEP >keepawayLogFixed=< NUM ><CB >
		< OB ><KEEPAWAY_LOG_FIXED_NAME ><SEP >keepawayLogFixedName=< NAM ><CB >
		< OB ><KEEPAWAY_LOGGING ><SEP >keepawayLogging=< NUM ><CB >
		< OB ><KEEPAWAY_START ><SEP >keepawayStart=< NUM ><CB >
		< OB ><KEEPAWAY_WIDTH ><SEP >keepawayWidth=< NUM ><CB >
		< OB ><KICK_OFF_WAIT ><SEP >kickOffWait=< NUM ><CB >
		< OB ><KICK_POWER_RATE ><SEP >kickPowerRate=< NUM ><CB >
		< OB ><KICK_RAND ><SEP >kickRand=< NUM ><CB >
		< OB ><KICK_RAND_FACTOR_L ><SEP >kickRandFactorL=< NUM ><CB >
		< OB ><KICK_RAND_FACTOR_R ><SEP >kickRandFactorR=< NUM ><CB >
		< OB ><KICKABLE_MARGIN ><SEP >kickableMargin=< NUM ><CB >
		< OB ><LANDMARK_FILE ><SEP >landmarkFile=< NAM ><CB >
		< OB ><LOG_DATE_FORMAT><SEP >logDateFormat=< NAM ><CB >
		< OB ><LOG_TIMES ><SEP >logTimes=< NUM ><CB >
		< OB ><MAX_BACK_TACKLE_POWER ><SEP >maxBackTacklePower=< NUM ><CB >
		< OB ><MAX_DASH_ANGLE ><SEP >maxDashAngle=< NUM ><CB >
		< OB ><MAX_DASH_POWER ><SEP >maxDashPower=< NUM ><CB >
		< OB ><MAX_GOAL_KICKS ><SEP >maxGoalKicks=< NUM ><CB >
		< OB ><MAX_TACKLE_POWER><SEP >maxTacklePower=< NUM ><CB >
		< OB ><MAXMOMENT ><SEP >maxmoment=< NUM ><CB >
		< OB ><MAXNECKANG ><SEP >maxneckang=< NUM ><CB >
		< OB ><MAXNECKMOMENT ><SEP >maxneckmoment=< NUM ><CB >
		< OB ><MAXPOWER ><SEP >maxpower=< NUM ><CB >
		< OB ><MIN_DASH_ANGLE ><SEP >minDashAngle=< NUM ><CB >
		< OB ><MIN_DASH_POWER ><SEP >minDashPower=< NUM ><CB >
		< OB ><MINMOMENT ><SEP >minmoment=< NUM ><CB >
		< OB ><MINNECKANG ><SEP >minneckang=< NUM ><CB >
		< OB ><MINNECKMOMENT ><SEP >minneckmoment=< NUM ><CB >
		< OB ><MINPOWER ><SEP >minpower=< NUM ><CB >
		< OB ><NR_EXTRA_HALFS ><SEP >nrExtraHalfs=< NUM ><CB >
		< OB ><NR_NORMAL_HALFS ><SEP >nrNormalHalfs=< NUM ><CB >
		< OB ><OFFSIDE_ACTIVE_AREA_SIZE ><SEP >offsideActiveAreaSize=< NUM ><CB >
		< OB ><OFFSIDE_KICK_MARGIN ><SEP >offsideKickMargin=< NUM ><CB >
		< OB ><OLCOACH_PORT ><SEP >olcoachPort=< NUM ><CB >
		< OB ><OLD_COACH_HEAR ><SEP >oldCoachHear=< NUM ><CB >
		< OB ><PEN_ALLOW_MULT_KICKS ><SEP >penAllowMultKicks=< NUM ><CB >
		< OB ><PEN_BEFORE_SETUP_WAIT ><SEP >penBeforeSetupWait=< NUM ><CB >
		< OB ><PEN_COACH_MOVES_PLAYERS ><SEP >penCoachMovesPlayers=< NUM ><CB >
		< OB ><PEN_DIST_X ><SEP >penDistX=< NUM ><CB >
		< OB ><PEN_MAX_EXTRA_KICKS ><SEP >penMaxExtraKicks=< NUM ><CB >
		< OB ><PEN_MAX_GOALIE_DIST_X><SEP >penMaxGoalieDistX=< NUM ><CB >
		< OB ><PEN_NR_KICKS ><SEP >penNrKicks=< NUM ><CB >
		< OB ><PEN_RANDOM_WINNER ><SEP >penRandomWinner=< NUM ><CB >
		< OB ><PEN_READY_WAIT ><SEP >penReadyWait=< NUM ><CB >
		< OB ><PEN_SETUP_WAIT ><SEP >penSetupWait=< NUM ><CB >
		< OB ><PEN_TAKEN_WAIT ><SEP >penTakenWait=< NUM ><CB >
		< OB ><PENALTY_SHOOT_OUTS ><SEP >penaltyShootOuts=< NUM ><CB >
		< OB ><PLAYER_ACCEL_MAX ><SEP >playerAccelMax=< NUM ><CB >
		< OB ><PLAYER_DECAY ><SEP >playerDecay=< NUM ><CB >
		< OB ><PLAYER_RAND ><SEP >playerRand=< NUM ><CB >
		< OB ><PLAYER_SIZE ><SEP >playerSize=< NUM ><CB >
		< OB ><PLAYER_SPEED_MAX><SEP >playerSpeedMax=< NUM ><CB >
		< OB ><PLAYER_SPEED_MAX_MIN ><SEP >playerSpeedMaxMin=< NUM ><CB >
		< OB ><PLAYER_WEIGHT ><SEP >playerWeight=< NUM ><CB >
		< OB ><POINT_TO_BAN ><SEP >pointToBan=< NUM ><CB >
		< OB ><POINT_TO_DURATION ><SEP >pointToDuration=< NUM ><CB >
		< OB ><PORT ><SEP >port=< NUM ><CB >
		< OB ><PRAND_FACTOR_L ><SEP >prandFactorL=< NUM ><CB >
		< OB ><PRAND_FACTOR_R ><SEP >prandFactorR=< NUM ><CB >
		< OB ><PROFILE ><SEP >profile=< NUM ><CB >
		< OB ><PROPER_GOAL_KICKS ><SEP >properGoalKicks=< NUM ><CB >
		< OB ><QUANTIZE_STEP ><SEP >quantizeStep=< NUM ><CB >
		< OB ><QUANTIZE_STEP_L ><SEP >quantizeStepL=< NUM ><CB >
		< OB ><RECORD_MESSAGES ><SEP >recordMessages=< NUM ><CB >
		< OB ><RECOVER_DEC ><SEP >recoverDec=< NUM ><CB >
		< OB ><RECOVER_DEC_THR ><SEP >recoverDecThr=< NUM ><CB >
		< OB ><RECOVER_INIT ><SEP >recoverInit=< NUM ><CB >
		< OB ><RECOVER_MIN ><SEP >recoverMin=< NUM ><CB >
		< OB ><RECV_STEP ><SEP >recvStep=< NUM ><CB >
		< OB ><SAY_COACH_CNT_MAX ><SEP >sayCoachCntMax=< NUM ><CB >
		< OB ><SAY_COACH_MSG_SIZE ><SEP >sayCoachMsgSize=< NUM ><CB >
		< OB ><SAY_MSG_SIZE ><SEP >sayMsgSize=< NUM ><CB >
		< OB ><SEND_COMMS ><SEP >sendComms=< NUM ><CB >
		< OB ><SEND_STEP ><SEP >sendStep=< NUM ><CB >
		< OB ><SEND_VI_STEP ><SEP >sendViStep=< NUM ><CB >
		< OB ><SENSE_BODY_STEP ><SEP >senseBodyStep=< NUM ><CB >
		< OB ><SIDE_DASH_RATE ><SEP >sideDashRate=< NUM ><CB >
		< OB ><SIMULATOR_STEP ><SEP >simulatorStep=< NUM ><CB >
		< OB ><SLOW_DOWN_FACTOR ><SEP >slowDownFactor=< NUM ><CB >
		< OB ><SLOWNESS_ON_TOP_FOR_LEFT_TEAM ><SEP >slownessOnTopForLeftTeam=< NUM ><CB >
		< OB ><SLOWNESS_ON_TOP_FOR_RIGHT_TEAM ><SEP >slownessOnTopForRightTeam=< NUM ><CB >
		< OB ><STAMINA_CAPACITY ><SEP >staminaCapacity=< NUM ><CB >
		< OB ><STAMINA_INC_MAX ><SEP >staminaIncMax=< NUM ><CB >
		< OB ><STAMINA_MAX ><SEP >staminaMax=< NUM ><CB >
		< OB ><START_GOAL_L ><SEP >startGoalL=< NUM ><CB >
		< OB ><START_GOAL_R ><SEP >startGoalR=< NUM ><CB >
		< OB ><STOPPED_BALL_VEL ><SEP >stoppedBallVel=< NUM ><CB >
		< OB ><SYNCH_MICRO_SLEEP ><SEP >synchMicroSleep=< NUM ><CB >
		< OB ><SYNCH_MODE ><SEP >synchMode=< NUM ><CB >
		< OB ><SYNCH_OFFSET ><SEP >synchOffset=< NUM ><CB >
		< OB ><SYNCH_SEE_OFFSET ><SEP >synchSeeOffset=< NUM ><CB >
		< OB ><TACKLE_BACK_DIST ><SEP >tackleBackDist=< NUM ><CB >
		< OB ><TACKLE_CYCLES ><SEP >tackleCycles=< NUM ><CB >
		< OB ><TACKLE_DIST ><SEP >tackleDist=< NUM ><CB >
		< OB ><TACKLE_EXPONENT ><SEP >tackleExponent=< NUM ><CB >
		< OB ><TACKLE_POWER_RATE ><SEP >tacklePowerRate=< NUM ><CB >
		< OB ><TACKLE_WIDTH ><SEP >tackleWidth=< NUM ><CB >
		< OB ><TEAM_ACTUATOR_NOISE ><SEP >teamActuatorNoise=< NUM ><CB >
		< OB ><TEAM_L_START ><SEP >[teamLStart=< NAM >]<CB >
		< OB ><TEAM_R_START ><SEP >[teamRStart=< NAM >]<CB >
		< OB ><TEXT_LOG_COMPRESSION ><SEP >textLogCompression=< NUM ><CB >
		< OB ><TEXT_LOG_DATED ><SEP >textLogDated=< NUM ><CB >
		< OB ><TEXT_LOG_DIR ><SEP >textLogDir=< NAM ><CB >
		< OB ><TEXT_LOG_FIXED ><SEP >textLogFixed=< NUM ><CB >
		< OB ><TEXT_LOG_FIXED_NAME ><SEP >textLogFixedName=< NAM ><CB >
		< OB ><TEXT_LOGGING ><SEP >textLogging=< NUM ><CB >
		< OB ><USE_OFFSIDE ><SEP >useOffside=< NUM ><CB >
		< OB ><VERBOSE ><SEP >verbose=< NUM ><CB >
		< OB ><VISIBLE_ANGLE ><SEP >visibleAngle=< NUM ><CB >
		< OB ><VISIBLE_DISTANCE ><SEP >visibleDistance=< NUM ><CB >
		< OB ><WIND_ANG  ><SEP >windAng=< NUM ><CB >
		< OB ><WIND_DIR ><SEP >windDir=< NUM ><CB >
		< OB ><WIND_FORCE ><SEP >windForce=< NUM ><CB >
		< OB ><WIND_NONE ><SEP >windNone=< NUM ><CB >
		< OB ><WIND_RAND ><SEP >windRand=< NUM ><CB >
		< OB ><WIND_RANDOM ><SEP >windRandom=< NUM ><CB >
      {
		Double dAudioCutDist = new Double(audioCutDist.image);
		Double dAutoMode = new Double(autoMode.image);
		Double dBackDashRate = new Double(backDashRate.image);
		Double dBackPasses = new Double(backPasses.image);
		Double dBallAccelMax = new Double(ballAccelMax.image);
		Double dBallDecay = new Double(ballDecay.image);
		Double dBallRand = new Double(ballRand.image);
		Double dBallSize = new Double(ballSize.image);
		Double dBallSpeedMax = new Double(ballSpeedMax.image);
		Double dBallStuckArea = new Double(ballStuckArea.image);
		Double dBallWeight = new Double(ballWeight.image);
		Double dCatchBanCycle = new Double(catchBanCycle.image);
		Double dCatchProbability = new Double(catchProbability.image);
		Double dCatchableAreaL = new Double(catchableAreaL.image);
		Double dCatchableAreaW = new Double(catchableAreaW.image);
		Double dCkickMargin = new Double(ckickMargin.image);
		Double dClangAdviceWin = new Double(clangAdviceWin.image);
		Double dClangDefineWin = new Double(clangDefineWin.image);
		Double dClangDelWin = new Double(clangDelWin.image);
		Double dClangInfoWin = new Double(clangInfoWin.image);
		Double dClangMessDelay = new Double(clangMessDelay.image);
		Double dClangMessPerCycle = new Double(clangMessPerCycle.image);
		Double dClangMetaWin = new Double(clangMetaWin.image);
		Double dClangRuleWin = new Double(clangRuleWin.image);
		Double dClangWinSize = new Double(clangWinSize.image);
		Double dCoach = new Double(coach.image);
		Double dCoachPort = new Double(coachPort.image);
		Double dCoachWReferee = new Double(coachWReferee.image);
		Double dConnectWait = new Double(connectWait.image);
		Double dControlRadius = new Double(controlRadius.image);
		Double dDashAngleStep = new Double(dashAngleStep.image);
		Double dDashPowerRate = new Double(dashPowerRate.image);
		Double dDropBallTime = new Double(dropBallTime.image);
		Double dEffortDec = new Double(effortDec.image);
		Double dEffortDecThr = new Double(effortDecThr.image);
		Double dEffortInc = new Double(effortInc.image);
		Double dEffortIncThr = new Double(effortIncThr.image);
		Double dEffortInit = new Double(effortInit.image);
		Double dEffortMin = new Double(effortMin.image);
		Double dExtraHalfTime = new Double(extraHalfTime.image);
		Double dExtraStamina = new Double(extraStamina.image);
		Double dForbidKickOffOffside = new Double(forbidKickOffOffside.image);
		Double dFreeKickFaults = new Double(freeKickFaults.image);
		Double dFreeformSendPeriod = new Double(freeformSendPeriod.image);
		Double dFreeformWaitPeriod = new Double(freeformWaitPeriod.image);
		Double dFullstateL = new Double(fullstateL.image);
		Double dFullstateR = new Double(fullstateR.image);
		Double dGameLogCompression = new Double(gameLogCompression.image);
		Double dGameLogDated = new Double(gameLogDated.image);
		String sGameLogDir = null;
		if (gameLogDir == null){
			sGameLogDir = new String("");
		}else{
		  	sGameLogDir = new String(gameLogDir.image);
		}
		Double dGameLogFixed = new Double(gameLogFixed.image);
		String sGameLogFixedName = null;
		if (gameLogFixedName == null){
			sGameLogFixedName = new String("");
		}else{
		  	sGameLogFixedName = new String(gameLogFixedName.image);
		}
		Double dGameLogVersion = new Double(gameLogVersion.image);
		Double dGameLogging = new Double(gameLogging.image);
		Double dGameOverWait = new Double(gameOverWait.image);
		Double dGoalWidth = new Double(goalWidth.image);
		Double dGoalieMaxMoves = new Double(goalieMaxMoves.image);
		Double dHalfTime = new Double(halfTime.image);
		Double dHearDecay = new Double(hearDecay.image);
		Double dHearInc = new Double(hearInc.image);
		Double dHearMax = new Double(hearMax.image);
		Double dInertiaMoment = new Double(inertiaMoment.image);
		Double dKeepaway = new Double(keepaway.image);
		Double dKeepawayLength = new Double(keepawayLength.image);
		Double dKeepawayLogDated = new Double(keepawayLogDated.image);
		String sKeepawayLogDir = null;
		if (keepawayLogDir == null){
			sKeepawayLogDir = new String("");
		}else{
		  	sKeepawayLogDir = new String(keepawayLogDir.image);
		}
		Double dKeepawayLogFixed = new Double(keepawayLogFixed.image);
		String sKeepawayLogFixedName = null;
		if (keepawayLogFixedName == null){
			sKeepawayLogFixedName = new String("");
		}else{
		  	sKeepawayLogFixedName = new String(keepawayLogFixedName.image);
		}
		Double dKeepawayLogging = new Double(keepawayLogging.image);
		Double dKeepawayStart = new Double(keepawayStart.image);
		Double dKeepawayWidth = new Double(keepawayWidth.image);
		Double dKickOffWait = new Double(kickOffWait.image);
		Double dKickPowerRate = new Double(kickPowerRate.image);
		Double dKickRand = new Double(kickRand.image);
		Double dKickRandFactorL = new Double(kickRandFactorL.image);
		Double dKickRandFactorR = new Double(kickRandFactorR.image);
		Double dKickableMargin = new Double(kickableMargin.image);
		String sLandmarkFile = null;
		if (landmarkFile == null){
			sLandmarkFile = new String("");
		}else{
		  	sLandmarkFile = new String(landmarkFile.image);
		}
		String sLogDateFormat = null;
		if (logDateFormat == null){
			sLogDateFormat = new String("");
		}else{
		  	sLogDateFormat = new String(logDateFormat.image);
		}
		Double dLogTimes = new Double(logTimes.image);
		Double dMaxBackTacklePower = new Double(maxBackTacklePower.image);
		Double dMaxDashAngle = new Double(maxDashAngle.image);
		Double dMaxDashPower = new Double(maxDashPower.image);
		Double dMaxGoalKicks = new Double(maxGoalKicks.image);
		Double dMaxTacklePower = new Double(maxTacklePower.image);
		Double dMaxmoment = new Double(maxmoment.image);
		Double dMaxneckang = new Double(maxneckang.image);
		Double dMaxneckmoment = new Double(maxneckmoment.image);
		Double dMaxpower = new Double(maxpower.image);
		Double dMinDashAngle = new Double(minDashAngle.image);
		Double dMinDashPower = new Double(minDashPower.image);
		Double dMinmoment = new Double(minmoment.image);
		Double dMinneckang = new Double(minneckang.image);
		Double dMinneckmoment = new Double(minneckmoment.image);
		Double dMinpower = new Double(minpower.image);
		Double dNrExtraHalfs = new Double(nrExtraHalfs.image);
		Double dNrNormalHalfs = new Double(nrNormalHalfs.image);
		Double dOffsideActiveAreaSize = new Double(offsideActiveAreaSize.image);
		Double dOffsideKickMargin = new Double(offsideKickMargin.image);
		Double dOlcoachPort = new Double(olcoachPort.image);
		Double dOldCoachHear = new Double(oldCoachHear.image);
		Double dPenAllowMultKicks = new Double(penAllowMultKicks.image);
		Double dPenBeforeSetupWait = new Double(penBeforeSetupWait.image);
		Double dPenCoachMovesPlayers = new Double(penCoachMovesPlayers.image);
		Double dPenDistX = new Double(penDistX.image);
		Double dPenMaxExtraKicks = new Double(penMaxExtraKicks.image);
		Double dPenMaxGoalieDistX = new Double(penMaxGoalieDistX.image);
		Double dPenNrKicks = new Double(penNrKicks.image);
		Double dPenRandomWinner = new Double(penRandomWinner.image);
		Double dPenReadyWait = new Double(penReadyWait.image);
		Double dPenSetupWait = new Double(penSetupWait.image);
		Double dPenTakenWait = new Double(penTakenWait.image);
		Double dPenaltyShootOuts = new Double(penaltyShootOuts.image);
		Double dPlayerAccelMax = new Double(playerAccelMax.image);
		Double dPlayerDecay = new Double(playerDecay.image);
		Double dPlayerRand = new Double(playerRand.image);
		Double dPlayerSize = new Double(playerSize.image);
		Double dPlayerSpeedMax = new Double(playerSpeedMax.image);
		Double dPlayerSpeedMaxMin = new Double(playerSpeedMaxMin.image);
		Double dPlayerWeight = new Double(playerWeight.image);
		Double dPointToBan = new Double(pointToBan.image);
		Double dPointToDuration = new Double(pointToDuration.image);
		Double dPort = new Double(port.image);
		Double dPrandFactorL = new Double(prandFactorL.image);
		Double dPrandFactorR = new Double(prandFactorR.image);
		Double dProfile = new Double(profile.image);
		Double dProperGoalKicks = new Double(properGoalKicks.image);
		Double dQuantizeStep = new Double(quantizeStep.image);
		Double dQuantizeStepL = new Double(quantizeStepL.image);
		Double dRecordMessages = new Double(recordMessages.image);
		Double dRecoverDec = new Double(recoverDec.image);
		Double dRecoverDecThr = new Double(recoverDecThr.image);
		Double dRecoverInit = new Double(recoverInit.image);
		Double dRecoverMin = new Double(recoverMin.image);
		Double dRecvStep = new Double(recvStep.image);
		Double dSayCoachCntMax = new Double(sayCoachCntMax.image);
		Double dSayCoachMsgSize = new Double(sayCoachMsgSize.image);
		Double dSayMsgSize = new Double(sayMsgSize.image);
		Double dSendComms = new Double(sendComms.image);
		Double dSendStep = new Double(sendStep.image);
		Double dSendViStep = new Double(sendViStep.image);
		Double dSenseBodyStep = new Double(senseBodyStep.image);
		Double dSideDashRate = new Double(sideDashRate.image);
		Double dSimulatorStep = new Double(simulatorStep.image);
		Double dSlowDownFactor = new Double(slowDownFactor.image);
		Double dSlownessOnTopForLeftTeam = new Double(slownessOnTopForLeftTeam.image);
		Double dSlownessOnTopForRightTeam = new Double(slownessOnTopForRightTeam.image);
		Double dStaminaCapacity = new Double(staminaCapacity.image);
		Double dStaminaIncMax = new Double(staminaIncMax.image);
		Double dStaminaMax = new Double(staminaMax.image);
		Double dStartGoalL = new Double(startGoalL.image);
		Double dStartGoalR = new Double(startGoalR.image);
		Double dStoppedBallVel = new Double(stoppedBallVel.image);
		Double dSynchMicroSleep = new Double(synchMicroSleep.image);
		Double dSynchMode = new Double(synchMode.image);
		Double dSynchOffset = new Double(synchOffset.image);
		Double dSynchSeeOffset = new Double(synchSeeOffset.image);
		Double dTackleBackDist = new Double(tackleBackDist.image);
		Double dTackleCycles = new Double(tackleCycles.image);
		Double dTackleDist = new Double(tackleDist.image);
		Double dTackleExponent = new Double(tackleExponent.image);
		Double dTacklePowerRate = new Double(tacklePowerRate.image);
		Double dTackleWidth = new Double(tackleWidth.image);
		Double dTeamActuatorNoise = new Double(teamActuatorNoise.image);
		String sTeamLStart = null;
		if (teamLStart == null){
			sTeamLStart = new String("");
		}else{
		  	sTeamLStart = new String(teamLStart.image);
		}
		String sTeamRStart = null;
		if (teamRStart == null){
			sTeamRStart = new String("");
		}else{
		  	sTeamRStart = new String(teamRStart.image);
		}
		Double dTextLogCompression = new Double(textLogCompression.image);
		Double dTextLogDated = new Double(textLogDated.image);
		String sTextLogDir = null;
		if (textLogDir == null){
			sTextLogDir = new String("");
		}else{
		  	sTextLogDir = new String(textLogDir.image);
		}
		Double dTextLogFixed = new Double(textLogFixed.image);
		String sTextLogFixedName = null;
		if (textLogFixedName == null){
			sTextLogFixedName = new String("");
		}else{
		  	sTextLogFixedName = new String(textLogFixedName.image);
		}
		Double dTextLogging = new Double(textLogging.image);
		Double dUseOffside = new Double(useOffside.image);
		Double dVerbose = new Double(verbose.image);
		Double dVisibleAngle = new Double(visibleAngle.image);
		Double dVisibleDistance = new Double(visibleDistance.image);
		Double dWindAng = new Double(windAng.image);
		Double dWindDir = new Double(windDir.image);
		Double dWindForce = new Double(windForce.image);
		Double dWindNone = new Double(windNone.image);
		Double dWindRand = new Double(windRand.image);
		Double dWindRandom = new Double(windRandom.image);
        HashMap info                       = new HashMap<ServerParams, Object>();
        info.put(ServerParams.AUDIO_CUT_DIST, dAudioCutDist.doubleValue());
        info.put(ServerParams.AUTO_MODE, dAutoMode.doubleValue());
        info.put(ServerParams.BACK_DASH_RATE, dBackDashRate.doubleValue());
        info.put(ServerParams.BACK_PASSES, dBackPasses.doubleValue());
        info.put(ServerParams.BALL_ACCEL_MAX, dBallAccelMax.doubleValue());
        info.put(ServerParams.BALL_DECAY, dBallDecay.doubleValue());
        info.put(ServerParams.BALL_RAND, dBallRand.doubleValue());
        info.put(ServerParams.BALL_SIZE, dBallSize.doubleValue());
        info.put(ServerParams.BALL_SPEED_MAX, dBallSpeedMax.doubleValue());
        info.put(ServerParams.BALL_STUCK_AREA, dBallStuckArea.doubleValue());
        info.put(ServerParams.BALL_WEIGHT, dBallWeight.doubleValue());
        info.put(ServerParams.CATCH_BAN_CYCLE, dCatchBanCycle.doubleValue());
        info.put(ServerParams.CATCH_PROBABILITY, dCatchProbability.doubleValue());
        info.put(ServerParams.CATCHABLE_AREA_L, dCatchableAreaL.doubleValue());
        info.put(ServerParams.CATCHABLE_AREA_W, dCatchableAreaW.doubleValue());
        info.put(ServerParams.CKICK_MARGIN, dCkickMargin.doubleValue());
        info.put(ServerParams.CLANG_ADVICE_WIN, dClangAdviceWin.doubleValue());
        info.put(ServerParams.CLANG_DEFINE_WIN, dClangDefineWin.doubleValue());
        info.put(ServerParams.CLANG_DEL_WIN, dClangDelWin.doubleValue());
        info.put(ServerParams.CLANG_INFO_WIN, dClangInfoWin.doubleValue());
        info.put(ServerParams.CLANG_MESS_DELAY, dClangMessDelay.doubleValue());
        info.put(ServerParams.CLANG_MESS_PER_CYCLE, dClangMessPerCycle.doubleValue());
        info.put(ServerParams.CLANG_META_WIN, dClangMetaWin.doubleValue());
        info.put(ServerParams.CLANG_RULE_WIN, dClangRuleWin.doubleValue());
        info.put(ServerParams.CLANG_WIN_SIZE, dClangWinSize.doubleValue());
        info.put(ServerParams.COACH, dCoach.doubleValue());
        info.put(ServerParams.COACH_PORT, dCoachPort.doubleValue());
        info.put(ServerParams.COACH_W_REFEREE, dCoachWReferee.doubleValue());
        info.put(ServerParams.CONNECT_WAIT, dConnectWait.doubleValue());
        info.put(ServerParams.CONTROL_RADIUS, dControlRadius.doubleValue());
        info.put(ServerParams.DASH_ANGLE_STEP, dDashAngleStep.doubleValue());
        info.put(ServerParams.DASH_POWER_RATE, dDashPowerRate.doubleValue());
        info.put(ServerParams.DROP_BALL_TIME, dDropBallTime.doubleValue());
        info.put(ServerParams.EFFORT_DEC, dEffortDec.doubleValue());
        info.put(ServerParams.EFFORT_DEC_THR, dEffortDecThr.doubleValue());
        info.put(ServerParams.EFFORT_INC, dEffortInc.doubleValue());
        info.put(ServerParams.EFFORT_INC_THR, dEffortIncThr.doubleValue());
        info.put(ServerParams.EFFORT_INIT, dEffortInit.doubleValue());
        info.put(ServerParams.EFFORT_MIN, dEffortMin.doubleValue());
        info.put(ServerParams.EXTRA_HALF_TIME, dExtraHalfTime.doubleValue());
        info.put(ServerParams.EXTRA_STAMINA, dExtraStamina.doubleValue());
        info.put(ServerParams.FORBID_KICK_OFF_OFFSIDE, dForbidKickOffOffside.doubleValue());
        info.put(ServerParams.FREE_KICK_FAULTS, dFreeKickFaults.doubleValue());
        info.put(ServerParams.FREEFORM_SEND_PERIOD, dFreeformSendPeriod.doubleValue());
        info.put(ServerParams.FREEFORM_WAIT_PERIOD, dFreeformWaitPeriod.doubleValue());
        info.put(ServerParams.FULLSTATE_L, dFullstateL.doubleValue());
        info.put(ServerParams.FULLSTATE_R, dFullstateR.doubleValue());
        info.put(ServerParams.GAME_LOG_COMPRESSION, dGameLogCompression.doubleValue());
        info.put(ServerParams.GAME_LOG_FIXED_NAME, sGameLogFixedName.trim());
        info.put(ServerParams.GAME_LOG_VERSION, dGameLogVersion.doubleValue());
        info.put(ServerParams.GAME_LOGGING, dGameLogging.doubleValue());
        info.put(ServerParams.GAME_LOG_DATED, dGameLogDated.doubleValue());
        info.put(ServerParams.GAME_LOG_DIR, sGameLogDir.trim());
        info.put(ServerParams.GAME_LOG_FIXED, dGameLogFixed.doubleValue());
        info.put(ServerParams.GAME_OVER_WAIT, dGameOverWait.doubleValue());
        info.put(ServerParams.GOAL_WIDTH, dGoalWidth.doubleValue());
        info.put(ServerParams.GOALIE_MAX_MOVES, dGoalieMaxMoves.doubleValue());
        info.put(ServerParams.HALF_TIME, dHalfTime.doubleValue());
        info.put(ServerParams.HEAR_DECAY, dHearDecay.doubleValue());
        info.put(ServerParams.HEAR_INC, dHearInc.doubleValue());
        info.put(ServerParams.HEAR_MAX, dHearMax.doubleValue());
        info.put(ServerParams.INERTIA_MOMENT, dInertiaMoment.doubleValue());
        info.put(ServerParams.KEEPAWAY, dKeepaway.doubleValue());
        info.put(ServerParams.KEEPAWAY_LENGTH, dKeepawayLength.doubleValue());
        info.put(ServerParams.KEEPAWAY_LOG_DATED, dKeepawayLogDated.doubleValue());
        info.put(ServerParams.KEEPAWAY_LOG_DIR, sKeepawayLogDir.trim());
        info.put(ServerParams.KEEPAWAY_LOG_FIXED, dKeepawayLogFixed.doubleValue());
        info.put(ServerParams.KEEPAWAY_LOG_FIXED_NAME, sKeepawayLogFixedName.trim());
        info.put(ServerParams.KEEPAWAY_LOGGING, dKeepawayLogging.doubleValue());
        info.put(ServerParams.KEEPAWAY_START, dKeepawayStart.doubleValue());
        info.put(ServerParams.KEEPAWAY_WIDTH, dKeepawayWidth.doubleValue());
        info.put(ServerParams.KICK_OFF_WAIT, dKickOffWait.doubleValue());
        info.put(ServerParams.KICK_POWER_RATE, dKickPowerRate.doubleValue());
        info.put(ServerParams.KICK_RAND, dKickRand.doubleValue());
        info.put(ServerParams.KICK_RAND_FACTOR_L, dKickRandFactorL.doubleValue());
        info.put(ServerParams.KICK_RAND_FACTOR_R, dKickRandFactorR.doubleValue());
        info.put(ServerParams.KICKABLE_MARGIN, dKickableMargin.doubleValue());
        info.put(ServerParams.LANDMARK_FILE, sLandmarkFile.trim());
        info.put(ServerParams.LOG_DATE_FORMAT, sLogDateFormat.trim());
        info.put(ServerParams.LOG_TIMES, dLogTimes.doubleValue());
        info.put(ServerParams.MAX_BACK_TACKLE_POWER, dMaxBackTacklePower.doubleValue());
        info.put(ServerParams.MAX_DASH_ANGLE, dMaxDashAngle.doubleValue());
        info.put(ServerParams.MAX_DASH_POWER, dMaxDashPower.doubleValue());
        info.put(ServerParams.MAX_GOAL_KICKS, dMaxGoalKicks.doubleValue());
        info.put(ServerParams.MAX_TACKLE_POWER, dMaxTacklePower.doubleValue());
        info.put(ServerParams.MAXMOMENT, dMaxmoment.doubleValue());
        info.put(ServerParams.MAXNECKANG, dMaxneckang.doubleValue());
        info.put(ServerParams.MAXNECKMOMENT, dMaxneckmoment.doubleValue());
        info.put(ServerParams.MAXPOWER, dMaxpower.doubleValue());
        info.put(ServerParams.MIN_DASH_ANGLE, dMinDashAngle.doubleValue());
        info.put(ServerParams.MIN_DASH_POWER, dMinDashPower.doubleValue());
        info.put(ServerParams.MINMOMENT, dMinmoment.doubleValue());
        info.put(ServerParams.MINNECKANG, dMinneckang.doubleValue());
        info.put(ServerParams.MINNECKMOMENT, dMinneckmoment.doubleValue());
        info.put(ServerParams.MINPOWER, dMinpower.doubleValue());
        info.put(ServerParams.NR_EXTRA_HALFS, dNrExtraHalfs.doubleValue());
        info.put(ServerParams.NR_NORMAL_HALFS, dNrNormalHalfs.doubleValue());
        info.put(ServerParams.OFFSIDE_ACTIVE_AREA_SIZE, dOffsideActiveAreaSize.doubleValue());
        info.put(ServerParams.OFFSIDE_KICK_MARGIN, dOffsideKickMargin.doubleValue());
        info.put(ServerParams.OLCOACH_PORT, dOlcoachPort.doubleValue());
        info.put(ServerParams.OLD_COACH_HEAR, dOldCoachHear.doubleValue());
        info.put(ServerParams.PEN_ALLOW_MULT_KICKS, dPenAllowMultKicks.doubleValue());
        info.put(ServerParams.PEN_BEFORE_SETUP_WAIT, dPenBeforeSetupWait.doubleValue());
        info.put(ServerParams.PEN_COACH_MOVES_PLAYERS, dPenCoachMovesPlayers.doubleValue());
        info.put(ServerParams.PEN_DIST_X, dPenDistX.doubleValue());
        info.put(ServerParams.PEN_MAX_EXTRA_KICKS, dPenMaxExtraKicks.doubleValue());
        info.put(ServerParams.PEN_MAX_GOALIE_DIST_X, dPenMaxGoalieDistX.doubleValue());
        info.put(ServerParams.PEN_NR_KICKS, dPenNrKicks.doubleValue());
        info.put(ServerParams.PEN_RANDOM_WINNER, dPenRandomWinner.doubleValue());
        info.put(ServerParams.PEN_READY_WAIT, dPenReadyWait.doubleValue());
        info.put(ServerParams.PEN_SETUP_WAIT, dPenSetupWait.doubleValue());
        info.put(ServerParams.PEN_TAKEN_WAIT, dPenTakenWait.doubleValue());
        info.put(ServerParams.PENALTY_SHOOT_OUTS, dPenaltyShootOuts.doubleValue());
        info.put(ServerParams.PLAYER_ACCEL_MAX, dPlayerAccelMax.doubleValue());
        info.put(ServerParams.PLAYER_DECAY, dPlayerDecay.doubleValue());
        info.put(ServerParams.PLAYER_RAND, dPlayerRand.doubleValue());
        info.put(ServerParams.PLAYER_SIZE, dPlayerSize.doubleValue());
        info.put(ServerParams.PLAYER_SPEED_MAX, dPlayerSpeedMax.doubleValue());
        info.put(ServerParams.PLAYER_SPEED_MAX_MIN, dPlayerSpeedMaxMin.doubleValue());
        info.put(ServerParams.PLAYER_WEIGHT, dPlayerWeight.doubleValue());
        info.put(ServerParams.POINT_TO_BAN, dPointToBan.doubleValue());
        info.put(ServerParams.POINT_TO_DURATION, dPointToDuration.doubleValue());
        info.put(ServerParams.PORT, dPort.doubleValue());
        info.put(ServerParams.PRAND_FACTOR_L, dPrandFactorL.doubleValue());
        info.put(ServerParams.PRAND_FACTOR_R, dPrandFactorR.doubleValue());
        info.put(ServerParams.PROFILE, dProfile.doubleValue());
        info.put(ServerParams.PROPER_GOAL_KICKS, dProperGoalKicks.doubleValue());
        info.put(ServerParams.QUANTIZE_STEP, dQuantizeStep.doubleValue());
        info.put(ServerParams.QUANTIZE_STEP_L, dQuantizeStepL.doubleValue());
        info.put(ServerParams.RECORD_MESSAGES, dRecordMessages.doubleValue());
        info.put(ServerParams.RECOVER_DEC, dRecoverDec.doubleValue());
        info.put(ServerParams.RECOVER_DEC_THR, dRecoverDecThr.doubleValue());
        info.put(ServerParams.RECOVER_INIT, dRecoverInit.doubleValue());
        info.put(ServerParams.RECOVER_MIN, dRecoverMin.doubleValue());
        info.put(ServerParams.RECV_STEP, dRecvStep.doubleValue());
        info.put(ServerParams.SAY_COACH_CNT_MAX, dSayCoachCntMax.doubleValue());
        info.put(ServerParams.SAY_COACH_MSG_SIZE, dSayCoachMsgSize.doubleValue());
        info.put(ServerParams.SAY_MSG_SIZE, dSayMsgSize.doubleValue());
        info.put(ServerParams.SEND_COMMS, dSendComms.doubleValue());
        info.put(ServerParams.SEND_STEP, dSendStep.doubleValue());
        info.put(ServerParams.SEND_VI_STEP, dSendViStep.doubleValue());
        info.put(ServerParams.SENSE_BODY_STEP, dSenseBodyStep.doubleValue());
        info.put(ServerParams.SIDE_DASH_RATE, dSideDashRate.doubleValue());
        info.put(ServerParams.SIMULATOR_STEP, dSimulatorStep.doubleValue());
        info.put(ServerParams.SLOW_DOWN_FACTOR, dSlowDownFactor.doubleValue());
        info.put(ServerParams.SLOWNESS_ON_TOP_FOR_LEFT_TEAM, dSlownessOnTopForLeftTeam.doubleValue());
        info.put(ServerParams.SLOWNESS_ON_TOP_FOR_RIGHT_TEAM, dSlownessOnTopForRightTeam.doubleValue());
        info.put(ServerParams.STAMINA_CAPACITY, dStaminaCapacity.doubleValue());
        info.put(ServerParams.STAMINA_INC_MAX, dStaminaIncMax.doubleValue());
        info.put(ServerParams.STAMINA_MAX, dStaminaMax.doubleValue());
        info.put(ServerParams.START_GOAL_L, dStartGoalL.doubleValue());
        info.put(ServerParams.START_GOAL_R, dStartGoalR.doubleValue());
        info.put(ServerParams.STOPPED_BALL_VEL, dStoppedBallVel.doubleValue());
        info.put(ServerParams.SYNCH_MICRO_SLEEP, dSynchMicroSleep.doubleValue());
        info.put(ServerParams.SYNCH_MODE, dSynchMode.doubleValue());
        info.put(ServerParams.SYNCH_OFFSET, dSynchOffset.doubleValue());
        info.put(ServerParams.SYNCH_SEE_OFFSET, dSynchSeeOffset.doubleValue());
        info.put(ServerParams.TACKLE_BACK_DIST, dTackleBackDist.doubleValue());
        info.put(ServerParams.TACKLE_CYCLES, dTackleCycles.doubleValue());
        info.put(ServerParams.TACKLE_DIST, dTackleDist.doubleValue());
        info.put(ServerParams.TACKLE_EXPONENT, dTackleExponent.doubleValue());
        info.put(ServerParams.TACKLE_POWER_RATE, dTacklePowerRate.doubleValue());
        info.put(ServerParams.TACKLE_WIDTH, dTackleWidth.doubleValue());
        info.put(ServerParams.TEAM_ACTUATOR_NOISE, dTeamActuatorNoise.doubleValue());
        info.put(ServerParams.TEAM_L_START, sTeamLStart.trim());
        info.put(ServerParams.TEAM_R_START, sTeamRStart.trim());
        info.put(ServerParams.TEXT_LOG_COMPRESSION, dTextLogCompression.doubleValue());
        info.put(ServerParams.TEXT_LOG_DATED, dTextLogDated.doubleValue());
        info.put(ServerParams.TEXT_LOG_DIR, sTextLogDir.trim());
        info.put(ServerParams.TEXT_LOG_FIXED, dTextLogFixed.doubleValue());
        info.put(ServerParams.TEXT_LOG_FIXED_NAME, sTextLogFixedName.trim());
        info.put(ServerParams.TEXT_LOGGING, dTextLogging.doubleValue());
        info.put(ServerParams.USE_OFFSIDE, dUseOffside.doubleValue());
        info.put(ServerParams.VERBOSE, dVerbose.doubleValue());
        info.put(ServerParams.VISIBLE_ANGLE, dVisibleAngle.doubleValue());
        info.put(ServerParams.VISIBLE_DISTANCE, dVisibleDistance.doubleValue());
        info.put(ServerParams.WIND_ANG, dWindAng.doubleValue());
        info.put(ServerParams.WIND_DIR, dWindDir.doubleValue());
        info.put(ServerParams.WIND_FORCE, dWindForce.doubleValue());
        info.put(ServerParams.WIND_NONE, dWindNone.doubleValue());
        info.put(ServerParams.WIND_RAND, dWindRand.doubleValue());
        info.put(ServerParams.WIND_RANDOM, dWindRandom.doubleValue());
        controller.infoServerParam(info);
    }
}

void startCPTCommand() :
    {Token unum=null; Token type=null;}
    {
      unum=< NUM >[<SEP >type=< NUM >]
      {
        Integer iUnum = 0;
        Integer iType = 0;

        if(type != null){ 
			iUnum = new Integer(unum.image);
			iType = new Integer(type.image);	  
		  	controller.infoCPTOwn(iUnum.intValue(), iType.intValue());
		}else{
		  iUnum = new Integer(unum.image);
		  controller.infoCPTOther(iUnum.intValue());
		}
	}
}

void startPlayerParamCommand() :
    {Token allowMultDefaultType=null; Token dashPowerRateDeltaMax=null;
     Token dashPowerRateDeltaMin=null; Token effortMaxDeltaFactor=null;
     Token effortMinDeltaFactor=null; Token extraStaminaDeltaMax=null;
     Token extraStaminaDeltaMin=null; Token inertiaMomentDeltaFactor=null;
     Token kickRandDeltaFactor=null; Token kickableMarginDeltaMax=null;
     Token kickableMarginDeltaMin=null; Token newDashPowerRateDeltaMax=null;
     Token newDashPowerRateDeltaMin=null; Token newStaminaIncMaxDeltaFactor=null;
     Token playerDecayDeltaMax=null; Token playerDecayDeltaMin=null;
     Token playerSizeDeltaFactor=null; Token playerSpeedMaxDeltaMax=null;
     Token playerSpeedMaxDeltaMin=null; Token playerTypes=null; Token ptMax=null;
     Token randomSeed=null; Token staminaIncMaxDeltaFactor=null; Token subsMax=null;}
     {
       < OB ><ALLOW_MULT_DEFAULT_TYPE ><SEP >allowMultDefaultType=< NUM ><CB >
       < OB ><DASH_POWER_RATE_DELTA_MAX ><SEP >dashPowerRateDeltaMax=< NUM ><CB >
       < OB ><DASH_POWER_RATE_DELTA_MIN ><SEP >dashPowerRateDeltaMin=< NUM ><CB >
       < OB ><EFFORT_MAX_DELTA_FACTOR ><SEP >effortMaxDeltaFactor=< NUM ><CB >
       < OB ><EFFORT_MIN_DELTA_FACTOR ><SEP >effortMinDeltaFactor=< NUM ><CB >
       < OB ><EXTRA_STAMINA_DELTA_MAX ><SEP >extraStaminaDeltaMax=< NUM ><CB >
       < OB ><EXTRA_STAMINA_DELTA_MIN ><SEP >extraStaminaDeltaMin=< NUM ><CB >
       < OB ><INERTIA_MOMENT_DELTA_FACTOR ><SEP >inertiaMomentDeltaFactor=< NUM ><CB >
       < OB ><KICK_RAND_DELTA_FACTOR ><SEP >kickRandDeltaFactor=< NUM ><CB >
       < OB ><KICKABLE_MARGIN_DELTA_MAX ><SEP >kickableMarginDeltaMax=< NUM ><CB >
       < OB ><KICKABLE_MARGIN_DELTA_MIN ><SEP >kickableMarginDeltaMin=< NUM ><CB >
       < OB ><NEW_DASH_POWER_RATE_DELTA_MAX ><SEP >newDashPowerRateDeltaMax=< NUM ><CB >
	   < OB ><NEW_DASH_POWER_RATE_DELTA_MIN ><SEP >newDashPowerRateDeltaMin=< NUM ><CB >
	   < OB ><NEW_STAMINA_INC_MAX_DELTA_FACTOR ><SEP >newStaminaIncMaxDeltaFactor=< NUM ><CB >
	   < OB ><PLAYER_DECAY_DELTA_MAX ><SEP >playerDecayDeltaMax=< NUM ><CB >
	   < OB ><PLAYER_DECAY_DELTA_MIN ><SEP >playerDecayDeltaMin=< NUM ><CB >
	   < OB ><PLAYER_SIZE_DELTA_FACTOR ><SEP >playerSizeDeltaFactor=< NUM ><CB >
	   < OB ><PLAYER_SPEED_MAX_DELTA_MAX ><SEP >playerSpeedMaxDeltaMax=< NUM ><CB >
	   < OB ><PLAYER_SPEED_MAX_DELTA_MIN ><SEP >playerSpeedMaxDeltaMin=< NUM ><CB >
	   < OB ><PLAYER_TYPES ><SEP >playerTypes=< NUM ><CB >
	   < OB ><PT_MAX ><SEP >ptMax=< NUM ><CB >
	   < OB ><RANDOM_SEED ><SEP >randomSeed=< NUM ><CB >
	   < OB ><STAMINA_INC_MAX_DELTA_FACTOR ><SEP >staminaIncMaxDeltaFactor=< NUM ><CB >
	   < OB ><SUBS_MAX ><SEP >subsMax=< NUM ><CB >
       {
		Double dAllowMultDefaultType = new Double(allowMultDefaultType.image);
		Double dDashPowerRateDeltaMax = new Double(dashPowerRateDeltaMax.image);		
		Double dDashPowerRateDeltaMin = new Double(dashPowerRateDeltaMin.image);
		Double dEffortMaxDeltaFactor = new Double(effortMaxDeltaFactor.image);
		Double dEffortMinDeltaFactor = new Double(effortMinDeltaFactor.image);
		Double dExtraStaminaDeltaMax = new Double(extraStaminaDeltaMax.image);
		Double dExtraStaminaDeltaMin = new Double(extraStaminaDeltaMin.image);
		Double dInertiaMomentDeltaFactor = new Double(inertiaMomentDeltaFactor.image);
		Double dKickRandDeltaFactor = new Double(kickRandDeltaFactor.image);
		Double dKickableMarginDeltaMax = new Double(kickableMarginDeltaMax.image);
		Double dKickableMarginDeltaMin = new Double(kickableMarginDeltaMin.image);
		Double dNewDashPowerRateDeltaMax = new Double(newDashPowerRateDeltaMax.image);
		Double dNewDashPowerRateDeltaMin = new Double(newDashPowerRateDeltaMin.image);
		Double dNewStaminaIncMaxDeltaFactor = new Double(newStaminaIncMaxDeltaFactor.image);
		Double dPlayerDecayDeltaMax = new Double(playerDecayDeltaMax.image);
		Double dPlayerDecayDeltaMin = new Double(playerDecayDeltaMin.image);
		Double dPlayerTypes = new Double(playerTypes.image);
		Double dPtMax = new Double(ptMax.image);
		Double dRandomSeed = new Double(randomSeed.image);
		Double dStaminaIncMaxDeltaFactor = new Double(staminaIncMaxDeltaFactor.image);
		Double dSubsMax = new Double(subsMax.image);
		controller.infoPlayerParam(
		  dAllowMultDefaultType.doubleValue(), dDashPowerRateDeltaMax.doubleValue(),
		  dDashPowerRateDeltaMin.doubleValue(), dEffortMaxDeltaFactor.doubleValue(),
		  dEffortMinDeltaFactor.doubleValue(), dExtraStaminaDeltaMax.doubleValue(),
		  dExtraStaminaDeltaMin.doubleValue(), dInertiaMomentDeltaFactor.doubleValue(),
		  dKickRandDeltaFactor.doubleValue(), dKickableMarginDeltaMax.doubleValue(),
		  dKickableMarginDeltaMin.doubleValue(),
		  dNewDashPowerRateDeltaMax.doubleValue(), dNewDashPowerRateDeltaMin.doubleValue(),
		  dNewStaminaIncMaxDeltaFactor.doubleValue(), dPlayerDecayDeltaMax.doubleValue(),
		  dPlayerDecayDeltaMin.doubleValue(), dPlayerTypes.doubleValue(), dPtMax.doubleValue(),
		  dRandomSeed.doubleValue(), dStaminaIncMaxDeltaFactor.doubleValue(), dSubsMax.doubleValue());
	}
}

	void startPlayerTypeCommand() :
    {Token id=null; Token playerSpeedMax=null; Token staminaIncMax=null; Token playerDecay=null;
     Token inertiaMoment=null; Token dashPowerRate=null; Token playerSize=null;
     Token kickableMargin=null; Token kickRand=null; Token extraStamina=null;
     Token effortMax=null; Token effortMin=null;}{
		< OB ><ID ><SEP >id=<NUM ><CB >
		< OB ><PLAYER_SPEED_MAX ><SEP >playerSpeedMax=< NUM ><CB >
		< OB ><STAMINA_INC_MAX ><SEP >staminaIncMax=< NUM ><CB >
		< OB ><PLAYER_DECAY ><SEP >playerDecay=< NUM ><CB >
		< OB ><INERTIA_MOMENT ><SEP >inertiaMoment=< NUM ><CB >
		< OB ><DASH_POWER_RATE ><SEP >dashPowerRate=< NUM ><CB >
		< OB ><PLAYER_SIZE ><SEP >playerSize=< NUM ><CB >
		< OB ><KICKABLE_MARGIN ><SEP >kickableMargin=< NUM ><CB >
		< OB ><KICK_RAND ><SEP >kickRand=< NUM ><CB >
		< OB ><EXTRA_STAMINA ><SEP >extraStamina=< NUM ><CB >
		< OB ><EFFORT_MAX ><SEP >effortMax=< NUM ><CB >
		< OB ><EFFORT_MIN ><SEP >effortMin=< NUM ><CB >
		{
		Integer iid = new Integer(id.image);
		Double dPlayerSpeedMax = new Double(playerSpeedMax.image);
		Double dStaminaIncMax = new Double(staminaIncMax.image);
		Double dPlayerDecay = new Double(playerDecay.image);
		Double dInertiaMoment = new Double(inertiaMoment.image);
		Double dDashPowerRate = new Double(dashPowerRate.image);
		Double dPlayerSize = new Double(playerSize.image);
		Double dKickableMargin = new Double(kickableMargin.image);
		Double dKickRand = new Double(kickRand.image);
		Double dExtraStamina = new Double(extraStamina.image);
		Double dEffortMax = new Double(effortMax.image);
		Double dEffortMin = new Double(effortMin.image);
		controller.infoPlayerType(
		  iid.intValue(), dPlayerSpeedMax.doubleValue(), dStaminaIncMax.doubleValue(),
		  dPlayerDecay.doubleValue(), dInertiaMoment.doubleValue(), dDashPowerRate.doubleValue(),
		  dPlayerSize.doubleValue(), dKickableMargin.doubleValue(), dKickRand.doubleValue(),
		  dExtraStamina.doubleValue(), dEffortMax.doubleValue(), dEffortMin.doubleValue());
	}
}
